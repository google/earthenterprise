#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('third_party_env')
libcurl_version = 'curl-7.45.0'
ge_version = libcurl_version.replace('curl', 'curl-ge')

num_cpu = GetOption('num_jobs')

libcurl_source = File('#/../../earth_enterprise/third_party/libcurl/%s'
                      '.tar.gz' % libcurl_version).abspath

libcurl_env = third_party_env.DeepCopy()
root_dir = Dir(libcurl_env.exportdirs['root']).abspath
opt_dir = Dir(libcurl_env['optdir']).abspath

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, libcurl_version)
install_root = '%s/install' % current_dir
install_root_opt = '%s%s' % (install_root, opt_dir)


# [1] Extract libcurl
libcurl_target = '%s/.extract' % current_dir
libcurl_extract = libcurl_env.Command(
    libcurl_target, libcurl_source,
    [libcurl_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xzf %s\n'
        'touch %s' % (
            current_dir, current_dir, libcurl_source, libcurl_target))])

if third_party_env['is_min_ubuntu'] and not third_party_env['native_cc']:
  env_opt = ''
else:
  env_opt = ''

if libcurl_env['release'] or libcurl_env['optimize']:
  config_opt = '--disable-debug --enable-optimize'
else:
  config_opt = '--enable-debug --disable-optimize'

libcurl_env['ENV']['mod_env'] = libcurl_env['ENV']['mod_env'] + 'LDFLAGS=-lrt '

# [3] Configure libcurl
libcurl_target = '%s/.configure' % current_dir
libcurl_configure = libcurl_env.Command(
    libcurl_target, libcurl_extract,
    [libcurl_env.MultiCommand(
        ('cd {build_root_escaped}\n'
         'export LD_LIBRARY_PATH={build_lib_dir_escaped}\n'
         '{mod_env}{env_opt} ./configure --prefix={opt_dir_escaped} '
            '--with-ssl --without-ca-bundle '
            '--without-zlib --without-libidn --without-krb4 --without-gnutls '
            '--enable-shared --disable-static {config_opt}\n'
         'touch {libcurl_target_escaped}'
        ).format(
            build_root_escaped = libcurl_env.bash_escape(build_root),
            build_lib_dir_escaped =
                libcurl_env.bash_escape(libcurl_env.exportdirs['lib']),
            mod_env = libcurl_env['ENV']['mod_env'],
            env_opt = env_opt,
            opt_dir_escaped = libcurl_env.bash_escape(opt_dir),
            config_opt = config_opt,
            libcurl_target_escaped = libcurl_env.bash_escape(libcurl_target)
        )
    )])

# [4] Build
libcurl_target = '%s/.build' % current_dir
libcurl_build = libcurl_env.Command(
    libcurl_target, libcurl_configure,
    [libcurl_env.MultiCommand(
        'cd %s\n'
        '%smake -j%d\n'
        'touch %s' % (build_root, libcurl_env['ENV']['mod_env'], num_cpu,
                      libcurl_target))])

# [5] Create libcurl master installer
libcurl_target = '%s/.install' % current_dir
libcurl_install = libcurl_env.Command(
    libcurl_target, libcurl_build,
    [libcurl_env.MultiCommand(
        'cd %s\n'
        '%smake DESTDIR=%s install\n'
        'cd %s\n'
        'rm -rf lib/libcurl.a lib/libcurl.la lib/pkgconfig/libcurl.pc share/man/man1\n'
        'mkdir -p share/doc/packages/%s\n'
        'cd %s\n'
        'cp -pr CHANGES COPYING README RELEASE-NOTES %s/share/doc/packages/%s\n'
        'touch %s' % (build_root,
                      libcurl_env['ENV']['mod_env'], install_root,
                      install_root_opt,
                      ge_version,
                      build_root,
                      install_root_opt, ge_version,
                      libcurl_target))])

# [6] Install these into various directories as required for build
libcurl_target = '%s/.install_for_build' % current_dir
libcurl_install_build = libcurl_env.Command(
    libcurl_target, libcurl_install,
    [libcurl_env.rsync_cmd % (
        '%s/include/' % install_root_opt,
        '%s/include/' % root_dir),
     libcurl_env.rsync_cmd % (
         '%s/lib/' % install_root_opt,
         '%s/lib/' % root_dir),
     libcurl_env.rsync_cmd % (
         '%s/bin/' % install_root_opt,
         '%s/bin/' % root_dir),
     # replace prefix with root-directory path.
     'sed -i.bak s/"prefix=%s"/"prefix=%s"/g %s/bin/curl-config' % (
         opt_dir.replace('/', '\/'), root_dir.replace('/', '\/'), root_dir),
     Touch('$TARGET')])

Default(libcurl_install_build)
libcurl_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  libcurl_env.InstallFileOrDir(
      '%s/lib/' % install_root_opt,
      '%s/' % libcurl_env.installdirs['common_lib'],
      libcurl_install_build, 'install')
  libcurl_env.InstallFileOrDir(
      '%s/share/doc/packages/' % install_root_opt,
      '%s/doc/packages/' % (
          libcurl_env.installdirs['common_share']),
      libcurl_install_build, 'install')

Return('libcurl_extract libcurl_install_build')
