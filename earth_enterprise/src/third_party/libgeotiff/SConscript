#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('third_party_env')
libgeotiff_version = 'libgeotiff-1.4.0'
libgeotiff_ge_version = libgeotiff_version.replace('libgeotiff', 'libgeotiff-ge')

libgeotiff_patches = []

num_cpu = GetOption('num_jobs')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, libgeotiff_version)
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google' % install_root

libgeotiff_source = File('#/../third_party/libgeotiff/%s.tar.gz' %
                      libgeotiff_version).abspath

libgeotiff_env = third_party_env.DeepCopy()
root_dir = Dir(libgeotiff_env.exportdirs['root']).abspath



# [1] Extract libgeotiff
libgeotiff_target = '%s/.extract' % current_dir
libgeotiff_extract = libgeotiff_env.Command(
    libgeotiff_target, libgeotiff_source,
    [libgeotiff_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xzf %s\n'
        'touch %s' % (
            current_dir, current_dir, libgeotiff_source, libgeotiff_target))])

if third_party_env['is_hardy'] and not third_party_env['native_cc']:
  env_opt = ''
else:
  env_opt = ''

if libgeotiff_env['release'] or libgeotiff_env['optimize']:
  config_opt = ''
else:
  config_opt = ''

# [3] Configure libgeotiff
# Note the touch ./configure; Its a quirk, probably required because make
# thinks a configure too old to be newer than config.status (and does configure
# again if not touched to a recent time.)
libgeotiff_target = '%s/.configure' % current_dir
libgeotiff_configure = libgeotiff_env.Command(
    libgeotiff_target, libgeotiff_extract,
    [libgeotiff_env.MultiCommand(
        'cd %s\n'
        'touch ./configure\n'
        '%s%s ./configure --prefix=/opt/google --mandir=/opt/google/share/man '
        '--with-libjpeg=%s --with-libtiff=%s --with-proj=%s %s\n'
        'touch %s' % (build_root, libgeotiff_env['ENV']['mod_env'], env_opt,
                      root_dir, root_dir, root_dir, config_opt, libgeotiff_target))])

# [4] Build
# Fails with parallel build; so not using -j is intentional
libgeotiff_target = '%s/.build' % current_dir
libgeotiff_build = libgeotiff_env.Command(
    libgeotiff_target, libgeotiff_configure,
    [libgeotiff_env.MultiCommand(
        'cd %s\n'
        '%smake LD_SHARED="%s -shared"\n'
        'touch %s' % (build_root, libgeotiff_env['ENV']['mod_env'],
                      libgeotiff_env['ENV']['CXX'], libgeotiff_target))])

# [5] Create libgeotiff master installer
libgeotiff_target = '%s/.install' % current_dir
libgeotiff_install = libgeotiff_env.Command(
    libgeotiff_target, libgeotiff_build,
    [libgeotiff_env.MultiCommand(
        'cd %s\n'
        '%smake DESTDIR=%s install\n'
        'cd %s\n'
        'mkdir -p share/doc/packages/%s\n'
        'cd %s\n'
        'cp -pr README LICENSE ChangeLog '
        '%s/share/doc/packages/%s\n'
        'touch %s' % (build_root, libgeotiff_env['ENV']['mod_env'], install_root,
                      install_root_opt, libgeotiff_ge_version, build_root,
                      install_root_opt, libgeotiff_ge_version, libgeotiff_target))])

# [6] Install these into various directories as required for build
libgeotiff_target = '%s/.install_for_build' % current_dir
libgeotiff_install_build = libgeotiff_env.Command(
    libgeotiff_target, libgeotiff_install,
    [libgeotiff_env.rsync_cmd % (
        '%s/bin/' % install_root_opt,
        '%s/bin/' % libgeotiff_env.exportdirs['root']),
     libgeotiff_env.rsync_cmd % (
         '%s/include/' % install_root_opt,
         '%s/include/' % libgeotiff_env.exportdirs['root']),
     libgeotiff_env.rsync_cmd % (
         '%s/lib/' % install_root_opt,
         '%s/lib/' % libgeotiff_env.exportdirs['root']),
     Touch('$TARGET')])

Default(libgeotiff_install_build)
libgeotiff_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  libgeotiff_env.InstallFileOrDir(
      '%s/opt/google/bin/' % install_root,
      '%s/opt/google/bin/' % libgeotiff_env.installdirs['common_root'],
      libgeotiff_install_build, 'install')
  libgeotiff_env.InstallFileOrDir(
      '%s/opt/google/lib/' % install_root,
      '%s/opt/google/lib/' % libgeotiff_env.installdirs['common_root'],
      libgeotiff_install_build, 'install')
  libgeotiff_env.InstallFileOrDir(
      '%s/opt/google/share/' % install_root,
      '%s/opt/google/share/' % libgeotiff_env.installdirs['common_root'],
      libgeotiff_install_build, 'install')

Return('libgeotiff_extract libgeotiff_install_build')
