#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

Import('third_party_env')

qt_version = 'qt-3.3.8b'
qt_src_version = 'qt-x11-free-3.3.8b'

qt_patches = ['qt-rpath.patch', 'qt-ge-noGLU.patch', 'qt-gcc46.patch',
              'qt-freetype2_test.patch']

num_cpu = GetOption('num_jobs')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, qt_src_version)

qt_source = File('#/../../earth_enterprise/third_party/qt_338b/%s'
                 '.tar.gz' % qt_src_version).abspath

qt_env = third_party_env.DeepCopy()
qt_env['ENV']['mod_env'] += 'LD_LIBRARY_PATH=%s/lib ' % build_root

# [1] Extract qt
qt_target = '%s/.extract' % current_dir
qt_extract = qt_env.Command(
    qt_target, qt_source,
    [qt_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xfz %s\n'
        'touch %s' % (
            current_dir, current_dir, qt_source, qt_target))])

# [2] Patch qt
qt_target = '%s/.patch_qt' % current_dir
qt_patch = qt_env.Command(
    qt_target,
    qt_extract + map(qt_env.GetBuildPath, qt_patches),
    [qt_env.MultiCommand(
        'cd %s\n'
        '%s\n'
        'touch %s' % (build_root,
                      '\n'.join(map(lambda i: 'patch -g0 -p1 -s < %s' % (
                          qt_env.GetBuildPath(i)), qt_patches)),
                      qt_target))])


env_opt = ('QTDIR=%s '
           'PLATFORM="-platform linux-g++-64" '
           'QMAKE_LIBS_OPENGL="-lGL -lXmu" LD_LIBRARY_PATH=%s/lib' % (
               build_root, build_root))

if third_party_env['is_min_ubuntu'] and not third_party_env['native_cc']:
  env_opt += ''
else:
  env_opt += ''

if qt_env['release'] or qt_env['optimize']:
  config_opt = '-release'
else:
  config_opt = '-debug'

# [3] Configure qt
qt_target = '%s/.configure' % current_dir
qt_configure = qt_env.Command(
    qt_target, qt_patch,
    [qt_env.MultiCommand(
        'cd %s\n'
        'echo yes | %s%s ./configure -platform linux-g++-64 '
        '-prefix /opt/google/qt '
        '-no-exceptions '
        '-system-zlib '
        '-system-libjpeg -system-libmng ' #-system-libpng
        '-I/usr/include/libpng12 '
        '-qt-imgfmt-jpeg -qt-imgfmt-mng '
        '-thread '
        '-fast -nomake demos -nomake examples -nomake docs -nomake tests '
        '-shared -no-cups -freetype -stl -xcursor -xinerama -xrandr -xrender '
        '-xft -no-pch -ipv6 -nis -largefile -no-gif -xshape -no-tablet -xkb '
        '-L%s/lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib64 -I%s/include '
        '%s\n'
        'touch %s' % (build_root, qt_env['ENV']['mod_env'], env_opt,
                      qt_env.exportdirs['root'], qt_env.exportdirs['root'],
                      config_opt, qt_target))])

# [4] Build
qt_target = '%s/.build' % current_dir
qt_build = qt_env.Command(
    qt_target, qt_configure,
    [qt_env.MultiCommand(
        'cd %s\n'
        '%smake -j%d src-qmake src-moc sub-src sub-tools\n'
        'touch %s' % (build_root, qt_env['ENV']['mod_env'], num_cpu,
                      qt_target))])

# [5] Create qt master installer
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google/qt' % install_root
qt_target = '%s/.install' % current_dir
qt_install = qt_env.Command(
    qt_target, qt_build,
    [qt_env.MultiCommand(
        'cd %s\n'
        'make INSTALL_ROOT=%s install\n'
        'touch %s' % (build_root, install_root, qt_target))])

# [6] Install these into various directories as required for build
qt_target = '%s/.install_for_build' % current_dir
qt_install_build = qt_env.Command(
    qt_target, qt_install,
    [qt_env.rsync_cmd % (
        '%s/bin/' % install_root_opt,
        '%s/bin/' % qt_env.exportdirs['root']),
     qt_env.rsync_cmd % (
         '%s/include/' % install_root_opt,
         '%s/include/' % qt_env.exportdirs['root']),
     qt_env.rsync_cmd % (
         '%s/lib/' % install_root_opt,
         '%s/lib/' % qt_env.exportdirs['root']),
     Touch('$TARGET')])

Default(qt_install_build)
qt_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  qt_env.AlwaysBuild(qt_env.Alias(
      'install', [],
      [qt_env.MultiCommand(
          'mkdir -p %s/opt/google/qt/plugins\n'
          'mkdir -p %s/opt/google/qt/bin' % (
              qt_env.installdirs['common_root'],
              qt_env.installdirs['common_root']))]))
  qt_env.InstallFileOrDir(
      '%s/bin/qtconfig' % install_root_opt,
      '%s/opt/google/qt/bin/qtconfig' % qt_env.installdirs['common_root'],
      qt_install_build, 'install')
  qt_env.InstallFileOrDir(
      '%s/lib/' % install_root_opt,
      '%s/opt/google/qt/lib/' % qt_env.installdirs['common_root'],
      qt_install_build, 'install')
  qt_env.InstallFileOrDir(
      '%s/translations/' % install_root_opt,
      '%s/opt/google/qt/translations/' % qt_env.installdirs['common_root'],
      qt_install_build, 'install')

Return('qt_extract qt_install_build')
