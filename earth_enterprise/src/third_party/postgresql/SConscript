#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('third_party_env')

postgresql_version = 'postgresql-8.4.22'
postgresql_source = File('#/../../earth_enterprise/third_party/postgresql/%s.tar.bz2'
                         % postgresql_version).abspath

ge_version = postgresql_version.replace('postgresql', 'postgresql-ge')
num_cpu = GetOption('num_jobs')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, postgresql_version)

postgresql_env = third_party_env.DeepCopy()

# [1] Extract
postgresql_target = '%s/.extract' % current_dir
postgresql_extract = postgresql_env.Command(
    postgresql_target, postgresql_source,
    [postgresql_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar -xvf %s\n'
        'touch %s' % (
            current_dir, current_dir,
            postgresql_source, postgresql_target))])

# Find out whether optimize or debug and set variables accordingly
if postgresql_env['release'] or postgresql_env['optimize']:
  config_opt = '--disable-debug'
  env_opt = ('env CFLAGS="-O2 -Wall -Wmissing-prototypes -Wpointer-arith '
             '-Winline -Wdeclaration-after-statement -Wendif-labels '
             '-fno-strict-aliasing"')
else:
  config_opt = '--enable-debug'
  env_opt = ('env CFLAGS="-Wall -Wmissing-prototypes -Wpointer-arith -Winline '
             '-Wdeclaration-after-statement -Wendif-labels '
             '-fno-strict-aliasing"')

# [2] Configure
postgresql_target = '%s/.configure' % current_dir
postgresql_configure = postgresql_env.Command(
    postgresql_target, postgresql_extract,
    [postgresql_env.MultiCommand(
        'cd %s\n'
        '%s ./configure --prefix=/opt/google --mandir=/opt/google/share/man '
        '--disable-rpath --enable-thread-safety --with-openssl --with-python '
        '--without-perl --without-readline --without-pam --without-krb5 %s\n'
        'touch %s' % (build_root, env_opt, config_opt, postgresql_target))])

# [3] Build
make_options = '-j%d' % num_cpu
if third_party_env['is_hardy'] and not third_party_env['native_cc']:
  make_options = '%s python_additional_libs=""' % make_options
postgresql_target = '%s/.build' % current_dir
postgresql_build = postgresql_env.Command(
    postgresql_target, postgresql_configure,
    [postgresql_env.MultiCommand(
        'cd %s\n'
        '%smake %s\n'
        'touch %s' % (
            build_root, postgresql_env['ENV']['mod_env'], make_options,
            postgresql_target))])

# [4] Create postgresql master installer
install_root = '%s/install' % current_dir
postgresql_target = '%s/.install' % current_dir
postgresql_install = postgresql_env.Command(
    postgresql_target, postgresql_build,
    [postgresql_env.MultiCommand(
        'cd %s\n'
        'make DESTDIR=%s install\n'
        'mkdir -p %s/var/opt/google/pgsql/logs\n'
        'mkdir -p %s/opt/google/share/doc/packages/%s\n'
        'cp -pr COPYRIGHT HISTORY README %s/opt/google/share/doc/packages/%s\n'
        'touch %s' % (
            build_root, install_root, install_root, install_root, ge_version,
            install_root, ge_version, postgresql_target))])

# [5] Install these into various directories as required for build
postgresql_target = '%s/.install_for_build' % current_dir
install_root_opt = '%s/opt/google' % install_root
postgresql_install_build = postgresql_env.Command(
    postgresql_target, postgresql_install,
    [postgresql_env.rsync_cmd % ('%s/bin/' % install_root_opt,
                                 '%s/' % Dir(
                                     postgresql_env.exportdirs['bin']).abspath),
     postgresql_env.rsync_cmd % ('%s/include/' % install_root_opt,
                                 '%s/' % Dir(
                                     '%s/include' % postgresql_env.exportdirs[
                                         'root']).abspath),
     postgresql_env.rsync_cmd % ('%s/lib/' % install_root_opt, '%s/' % Dir(
         postgresql_env.exportdirs['lib']).abspath),
     Touch('$TARGET')])

Default(postgresql_install_build)
postgresql_env.ExecuteOnClean('rm -rf %s' % current_dir)

# [6] Copy to proper directory structure for installer (if install is in target)
if 'install' in COMMAND_LINE_TARGETS:
  postgresql_env.InstallFileOrDir(
      '%s/opt/google/bin/' % install_root,
      '%s/opt/google/bin/' % postgresql_env.installdirs['server_root'],
          postgresql_install_build, 'install')
  postgresql_env.InstallFileOrDir(
      '%s/opt/google/lib/' % install_root,
      '%s/opt/google/lib/' % postgresql_env.installdirs['server_root'],
          postgresql_install_build, 'install')
  postgresql_env.InstallFileOrDir(
      '%s/opt/google/share/' % install_root,
      '%s/opt/google/share/' % postgresql_env.installdirs['server_root'],
          postgresql_install_build, 'install')
  postgresql_env.InstallFileOrDir(
      '%s/var/' % install_root,
      '%s/user_magic/var/' % postgresql_env.installdirs['server_root'],
          postgresql_install_build, 'install')

Return('postgresql_extract postgresql_install_build')
