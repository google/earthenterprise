#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

Import('third_party_env')

apache_version = 'apache-2.4.39'
apache_apr_version = 'apr-1.7.0'
apache_apr_util_version = 'apr-util-1.6.1'
mm_version = 'mm-1.4.2'
apache_ge_version = apache_version.replace('apache', 'apache-ge')
httpd_version = apache_version.replace('apache', 'httpd')

apache_patches = [
                 'apache-ge-enablemanual.patch',
                 'apache-ge-htdocsallowoverride.patch',
                 'apache-ge-httpd.conf.in-cgi-bin_admin.patch',
                 'apache-ge-httpd.conf.in-handle_http_errors.patch',
                 'apache-ge-httpd-ssl.conf.in-include_location_ssl.patch',
                 'apache-ge-httpd-ssl.conf.in.patch',
                 'apache-ge-configure.patch'
                 ]

num_cpu = GetOption('num_jobs')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, apache_ge_version)

apache_dir = Dir('#/third_party/apache2').abspath
apache_source = File('#/../../earth_enterprise/third_party/apache2/%s.ta'
                     'r.gz' % apache_version.replace('apache', 'httpd')).abspath
apache_apr_source = File('#/../../earth_enterprise/third_party/apache2/%s.ta'
                     'r.gz' % apache_apr_version).abspath
apache_apr_util_source = File('#/../../earth_enterprise/third_party/apache2/%s.ta'
                     'r.gz' % apache_apr_util_version).abspath
mm_source = File('#/../../earth_enterprise/third_party/mm/%s.tar.gz' %
                 mm_version).abspath
patch_source = Dir('#/../../../geo/earth_enterprise/src/third_party/apache2'
                  ).abspath

apache_env = third_party_env.DeepCopy()
apache_env['ENV']['apr_cv_epoll_create1']='no'
apache_env['ENV']['apr_cv_dup3']='no'
apache_env['ENV']['apr_cv_accept4']='no'
apache_env['ENV']['apr_cv_sock_cloexec']='no'

root_dir = Dir(apache_env.exportdirs['root']).abspath

# [1] Extract apache
apache_target = '%s/.extract' % current_dir
apache_extract = apache_env.Command(
    apache_target, [apache_source, apache_apr_source, apache_apr_util_source, mm_source],
    [apache_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xzf %s\n'
        'tar xzf %s\n'
        'cd %s/srclib\n'
        'tar xzf %s\n'
        'mv %s apr\n'
        'tar xzf %s\n'
        'mv %s apr-util\n'
        'touch %s' % (build_root, build_root, apache_source, mm_source,
                      apache_version.replace('apache', 'httpd'),
                      apache_apr_source, apache_apr_version,
                      apache_apr_util_source, apache_apr_util_version,
                      apache_target))])

# [2] Patch apache
apache_target = '%s/.patch_apache' % current_dir
apache_patch = apache_env.Command(
    apache_target,
    apache_extract + map(apache_env.GetBuildPath, apache_patches),
    [apache_env.MultiCommand(
        'cd %s/%s\n'
        '%s\n'
        'touch %s' % (build_root, httpd_version,
                      '\n'.join(map(lambda i: 'patch -g0 -p1 --verbose < %s' % (
                          apache_env.GetBuildPath(i)), apache_patches)),
                      apache_target))])

# [3] Find out whether optimize or debug and set variables accordingly
env_opt = 'LIBS=-lpthread'
if apache_env['release'] or apache_env['optimize']:
  config_opt = '--disable-debug'
else:
  config_opt = '--enable-debug'

config_opt += ' --enable-socache-shmcb'

# [4] Configure mm
apache_target = '%s/.configure_mm' % current_dir
mm_configure = apache_env.Command(
    apache_target, apache_patch,
    [apache_env.MultiCommand(
        'cd %s/%s\n'
        '%s%s ./configure %s --disable-shared\n'
        'touch %s' % (
            build_root, mm_version, apache_env['ENV']['mod_env'],
            env_opt, config_opt, apache_target))])

# [5] Build mm
apache_target = '%s/.build_mm' % current_dir
mm_build = apache_env.Command(
    apache_target, mm_configure,
    [apache_env.MultiCommand(
        'cd %s/%s\n'
        '%smake -j%d\n'
        'touch %s' % (build_root, mm_version, apache_env['ENV']['mod_env'],
                      num_cpu, apache_target))])

# [6] Configure apache
env_opt = 'PORT=80 INCLUDES=-I/opt/google/include EAPI_MM=%s/%s' % (build_root,
                                                                    mm_version)
config_opt += (
    ' --with-program-name=gehttpd --with-port=80 --prefix=/opt/google/gehttpd '
    '--enable-mods-shared=all --with-ssl=/opt/google --enable-ssl=shared '
    '--with-crypto  '
    '--with-expat=/opt/google --with-mpm=worker --enable-proxy '
    '--enable-proxy-ajp --disable-proxy-connect --disable-proxy-ftp '
    '--disable-proxy-http --disable-proxy-balancer --without-sqlite2 '
    '--without-sqlite3 --without-mysql --with-ldap-include=%sinclude '
    '--with-ldap-lib=%s --with-ldap --enable-ldap --enable-authnz_ldap '
    '--with-included-apr '
    '--enable-cache --enable-disk-cache --enable-mem-cache --enable-file-cache' % (
        apache_env.exportdirs['root'], apache_env.exportdirs['lib']))
apache_target = '%s/.configure_apache' % current_dir
apache_configure = apache_env.Command(
    apache_target, mm_build,
    [apache_env.MultiCommand(
        'cd %s/%s\n'
        '%s%s ./configure %s\n'
        'touch %s' % (
            build_root, httpd_version, apache_env['ENV']['mod_env'],
            env_opt, config_opt, apache_target))])

# [7] Create apache master installer
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google/gehttpd' % install_root
install_root_doc = '%s/opt/google/share/doc/packages/%s' % (
    install_root, apache_ge_version)
to_prune_http = ['man', 'error', 'bin/htdbm',
                 'bin/httxt2dbm', 'bin/logresolve', 'bin/rotatelogs',
                 'htdocs/apache_pb.png', 'htdocs/apache_pb22.gif',
                 'htdocs/apache_pb22.png', 'htdocs/apache_pb22_ani.gif',
                 'htdocs/apache_pb.gif', 'htdocs/index.html'
                ]

# Note: used when compiling with crosstool
# TODO: delete.
#stdc = '/opt/google/lib64/libstdc++.so.6'
apache_target = '%s/.install' % current_dir
apache_install = apache_env.Command(
    apache_target, apache_configure,
    [apache_env.MultiCommand('\n'.join([
        'rm -rf %s' % install_root,
        'cd %s/%s' % (build_root, httpd_version),
        '%smake DESTDIR=%s install' % (apache_env['ENV']['mod_env'],
                                       install_root),
        'mkdir -p %s/etc/logrotate.d' % install_root,
        'install -m644 %s/apache-ge.logrotate %s/etc/logrotate.d/gehttpd' % (
            apache_dir, install_root),
        'install -m444 %s/google_tm.png '
        '%s/opt/google/gehttpd/htdocs/google_tm.png' % (
            apache_dir, install_root),
        'install -m444 %s/apache-ge-index.shtml '
        '%s/opt/google/gehttpd/htdocs/index.shtml' % (apache_dir, install_root),
        'install -m640 %s/htaccess '
        '%s/opt/google/gehttpd/htdocs/.htaccess' % (apache_dir, install_root),
        'install -m644 /dev/null '
        '%s/opt/google/gehttpd/htdocs/csi' % install_root,
        'find %s -type f | xargs grep -l "/usr/local/bin/perl5" | xargs perl '
        '-pi -e "s|/usr/local/bin/perl5|/usr/bin/perl|g;"' % install_root,
        'find %s -type f | xargs grep -l "/usr/local/bin/perl"| xargs perl -pi '
        '-e "s|/usr/local/bin/perl|/usr/bin/perl|g;"' % install_root,
        'chmod -x %s/opt/google/gehttpd/cgi-bin/*' % install_root,
        'sed -i -e "s^%s^^g" %s/opt/google/gehttpd/bin/apxs' % (
            install_root, install_root),
        'install -m777 -d %s/opt/google/gehttpd/conf.d' % install_root,
        'perl -p -e "s,\@\@ServerRoot\@\@,/opt/google/gehttpd," '
        '%s/apache-ge-index.conf > %s/opt/google/gehttpd/conf.d/index_rewrite'
        % (apache_dir, install_root),
        'chmod 444 %s/opt/google/gehttpd/conf.d/index_rewrite' % install_root,
        'install -m444 %s/gehttpd_error_handler.conf '
        '%s/opt/google/gehttpd/conf.d/' %(apache_dir, install_root),
        'install -m444 %s/gemod_headers_handler.conf '
        '%s/opt/google/gehttpd/conf.d/' %(apache_dir, install_root),
        'echo "" >> %s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
#        'echo "# Load libstdc++ so modules can use C++" >> '
#        '%s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
#        'echo "LoadFile %s" >> '
#        '%s/opt/google/gehttpd/conf/gehttpd.conf' % (stdc, install_root),
        'echo "" >> %s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
        'echo "# Include Google Earth Server-specific files" >> '
        '%s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
        'echo "Include conf.d/*.conf" >> '
        '%s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
        'echo "" >> %s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
        'echo "# Serve files as UTF-8 by default" >> '
        '%s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
        'echo "AddDefaultCharset utf-8" >> '
        '%s/opt/google/gehttpd/conf/gehttpd.conf' % install_root,
        'perl -pi -e "s/^User \w+/User IA_GEAPACHE_USER/; s/^Group \w+/Group '
        'IA_GEGROUP/;" %s/opt/google/gehttpd/conf/gehttpd.conf' % install_root
        ] + map(lambda i: 'rm -rf %s/%s' % (
            install_root_opt, i), to_prune_http) + [
                'mkdir -p %s' % install_root_doc,
                'cp -pr ABOUT_APACHE README CHANGES LICENSE NOTICE %s' % (
                    install_root_doc),
                'touch %s' % apache_target]))])

# [8] Install these into various directories as required for build
apache_target = '%s/.install_for_build' % current_dir
apache_install_build = apache_env.Command(
    apache_target, apache_install,
    [apache_env.rsync_cmd % (
        '%s/include' % install_root_opt,
        '%s' % root_dir),
     apache_env.rsync_cmd % (
         '%s/bin' % install_root_opt,
         '%s' % root_dir),
     apache_env.rsync_cmd % (
         '%s' % install_root_opt,
         '%s' % root_dir),
     # Update paths in apxs, apr, config_vars.mk for building mod_wsgi.
     'sed -i -e "s^%s^%s^g" %s/apxs' % (
            '/opt/google/gehttpd/build',
            '%s/gehttpd/build' % root_dir,
            '%s/bin' % root_dir),
     'sed -i -e "s^%s^%s^g" %s/apr-1-config' % (
            '/opt/google/gehttpd',
            '%s/gehttpd' % root_dir,
            '%s/bin' % root_dir),
     'sed -i -e "s^%s^%s^g" %s/config_vars.mk' % (
            '/opt/google/gehttpd',
            '%s/gehttpd' % root_dir,
            '%s/gehttpd/build' % root_dir),
     'sed -i -e "s^%s^%s^g" %s/apxs' % (
            '/opt/google/gehttpd/build',
            '%s/gehttpd/build' % root_dir,
            '%s/gehttpd/bin' % root_dir),
     'sed -i -e "s^%s^%s^g" %s/apr-1-config' % (
            '/opt/google/gehttpd',
            '%s/gehttpd' % root_dir,
            '%s/gehttpd/bin' % root_dir),
     Touch('$TARGET')])

Default(apache_install_build)
apache_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  server_root = apache_env.installdirs['server_root']
  install_apache = apache_env.InstallFileOrDir(
      '%s/opt/' % install_root,
      '%s/opt/' % server_root,
      apache_install_build, 'install_apache')

  # [9] Rearrange the following for server installation.
  apache_env.AlwaysBuild(apache_env.Alias(
      'install', install_apache,
      [apache_env.MultiCommand(
          'rm -rf %s/AppacheSupport %s/opt/google/gehttpd/cgi-bin/printenv '
          '%s/opt/google/gehttpd/cgi-bin/test-cgi\n'
          'mkdir -p %s/AppacheSupport/opt/google/gehttpd/bin %s/user_magic/etc\n'
          '%s\n'
          'cd %s/opt/google/gehttpd/\n'
          'mv bin/apxs %s/AppacheSupport/opt/google/gehttpd/bin\n'
          'mv build include %s/AppacheSupport/opt/google/gehttpd' % (
              server_root, server_root, server_root, server_root, server_root,
              apache_env.rsync_cmd % (
                  '%s/etc/' % install_root, '%s/user_magic/etc/' % server_root),
              server_root, server_root, server_root))]))

Return('apache_extract apache_install_build')
