#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('third_party_env')
geos_version = 'geos-3.4.2'

geos_patches = []

ge_version = geos_version.replace('geos', 'geos-ge')
num_cpu = GetOption('num_jobs')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, geos_version)
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google' % install_root

geos_source = File('#/../third_party/geos/%s.tar.bz2' % geos_version).abspath

geos_env = third_party_env.DeepCopy()
root_dir = Dir(geos_env.exportdirs['root']).abspath


# [1] Extract geos
geos_target = '%s/.extract' % current_dir
geos_extract = geos_env.Command(
    geos_target, geos_source,
    [geos_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xjf %s\n'
        'touch %s' % (
            current_dir, current_dir, geos_source, geos_target))])

# [2] Patch geos
geos_target = '%s/.patch_geos' % current_dir
patch_cmds = '\n'.join(map(lambda i: 'patch -g0 -p1 -s < %s' % (
                          geos_env.GetBuildPath(i)), geos_patches))
if patch_cmds:
  patch_cmds = '%s\n' % patch_cmds
geos_patch = geos_env.Command(
    geos_target,
    geos_extract + map(geos_env.GetBuildPath, geos_patches),
    [geos_env.MultiCommand(
        'cd %s\n'
        '%s'
        'touch %s' % (build_root, patch_cmds, geos_target))])

if third_party_env['is_hardy'] and not third_party_env['native_cc']:
  env_opt = ''
else:
  env_opt = ''

if geos_env['release'] or geos_env['optimize']:
  config_opt = ''
else:
  config_opt = ''

# [3] Configure geos
geos_target = '%s/.configure' % current_dir
geos_configure = geos_env.Command(
    geos_target, geos_patch,
    [geos_env.MultiCommand(
        'cd %s\n'
        '%s%s ./configure --mandir=/opt/google/share/man --prefix=/opt/google '
        '%s\n'
        'touch %s' % (build_root, geos_env['ENV']['mod_env'], env_opt,
                      config_opt, geos_target))])

# [4] Build
# Fails with parallel build; so not using -j is intentional
geos_target = '%s/.build' % current_dir
geos_build = geos_env.Command(
    geos_target, geos_configure,
    [geos_env.MultiCommand(
        'cd %s\n'
        '%smake -j%d\n'
        'touch %s' % (build_root, geos_env['ENV']['mod_env'], num_cpu,
                      geos_target))])

# [5] Create geos master installer
geos_target = '%s/.install' % current_dir
geos_install = geos_env.Command(
    geos_target, geos_build,
    [geos_env.MultiCommand(
        'cd %s\n'
        '%smake DESTDIR=%s install\n'
        'cd %s\n'
        'mkdir -p share/doc/packages/%s\n'
        'cd %s\n'
        'cp -pr COPYING ChangeLog README '
        '%s/share/doc/packages/%s\n'
        'touch %s' % (build_root, geos_env['ENV']['mod_env'], install_root,
                      install_root_opt, ge_version, build_root,
                      install_root_opt, ge_version, geos_target))])

# [6] Install these into various directories as required for build
geos_target = '%s/.install_for_build' % current_dir
geos_install_build = geos_env.Command(
    geos_target, geos_install,
    [geos_env.rsync_cmd % (
        '%s/bin/' % install_root_opt,
        '%s/bin/' % geos_env.exportdirs['root']),
     geos_env.rsync_cmd % (
         '%s/include/' % install_root_opt,
         '%s/include/' % geos_env.exportdirs['root']),
     geos_env.rsync_cmd % (
         '%s/lib/' % install_root_opt,
         '%s/lib/' % geos_env.exportdirs['root']),
     # Changes the prefix path in geos-config used for build from
     # '/opt/google/lib' used for install to path to build directory.
     # It excludes a dependency from '/opt/google/lib' in linking GDAL apps.
     # (excludes '/opt/google/lib' from the list of library search directories
     # generated with gdal-configure (see LIBS in ../gdalxxx/GDALmake.opt after
     # running gdalxxx/configure)).
     'sed -i~ -e "s;prefix=/opt/google;prefix=%s;" %s/bin/geos-config' % (root_dir, root_dir),
     Touch('$TARGET')])

Default(geos_install_build)
geos_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  geos_env.InstallFileOrDir(
      '%s/opt/google/lib/' % install_root,
      '%s/opt/google/lib/' % geos_env.installdirs['common_root'],
      geos_install_build, 'install')
  geos_env.InstallFileOrDir(
      '%s/opt/google/share/' % install_root,
      '%s/opt/google/share/' % geos_env.installdirs['common_root'],
      geos_install_build, 'install')

Return('geos_extract geos_install_build')
