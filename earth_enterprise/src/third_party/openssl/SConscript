#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('third_party_env')
import os

openssl_version = 'openssl-1.0.2h'
ge_version = openssl_version.replace('openssl', 'openssl-ge')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, openssl_version)

openssl_dir = Dir('#/third_party/openssl').abspath
openssl_source = File('#/../../earth_enterprise/third_party/openssl/%s.'
                      'tar.gz' % openssl_version).abspath

openssl_env = third_party_env.DeepCopy()

# [1] Extract openssl
openssl_target = '%s/.extract' % current_dir
openssl_extract = openssl_env.Command(
    openssl_target, openssl_source,
    [openssl_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xzf %s\n'
        'touch %s' % (
            current_dir, current_dir, openssl_source, openssl_target))])

# [2] Find out whether optimize or debug and set variables accordingly
if third_party_env['is_min_ubuntu'] and third_party_env['native_cc']:
  env_opt = 'CFLAGS="-L%s" CXXFLAGS="-L%s" LDCMD=g++ CC=%s CXX=%s' % (build_root, build_root, third_party_env['ENV']['CC'], third_party_env['ENV']['CXX'])
else:
  env_opt = 'LDFLAGS=-shared-libgcc CFLAGS="-L%s" CXXFLAGS="-L%s" LDCMD=g++ CC=%s CXX=%s' % (
      build_root, build_root, third_party_env['ENV']['CC'], third_party_env['ENV']['CXX'])

# [3] Configure openssl
openssl_target = '%s/.configure' % current_dir
openssl_configure = openssl_env.Command(
    openssl_target, openssl_extract,
    [openssl_env.MultiCommand(
        'cd %s\n'
        'perl util/perlpath.pl /usr/bin/perl\n'
        '%s%s ./Configure -DSSL_ALLOW_ADH --prefix=/opt/google '
        '--openssldir=/var/opt/google/openssl linux-x86_64 shared\n'
        'touch %s' % (build_root, openssl_env['ENV']['mod_env'], env_opt,
                      openssl_target))])

# [4] Build
openssl_target = '%s/.build' % current_dir
openssl_build = openssl_env.Command(
    openssl_target, openssl_configure,
    [openssl_env.MultiCommand(
        'cd %s\n'
        '%s%s make\n'
        'touch %s' % (build_root, openssl_env['ENV']['mod_env'], env_opt,
                      openssl_target))])

# [5] Create openssl master installer
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google' % install_root
openssl_target = '%s/.install' % current_dir
openssl_install = openssl_env.Command(
    openssl_target, openssl_build,
    [openssl_env.MultiCommand(
        'cd %s\n'
        'make INSTALL_PREFIX=%s install_sw\n'
        'cd %s\n'
        'if [ -d ./lib64 ]; then rsync -rltpvu ./lib64/ ./lib; rm -rf ./lib64; fi\n'
        'rm -rf lib/pkgconfig\n'
        'rm -rf lib/fips_premain.c\n'
        'rm -rf lib/fips_premain.c.sha1\n'
        'rm -rf lib/engines\n'
        'rm -rf share/doc/packages/%s\n'
        'mkdir -p share/doc/packages/%s\n'
        'cd -\n'
        'cp -pr CHANGES CHANGES.SSLeay LICENSE NEWS README '
        '%s/opt/google/share/doc/packages/%s\n'
        'touch %s' % (build_root, install_root, install_root_opt, ge_version,
                      ge_version, install_root, ge_version, openssl_target))])



# [6] Install these into various directories as required for build
openssl_target = '%s/.install_for_build' % current_dir
openssl_install_build = openssl_env.Command(
    openssl_target, openssl_install,
    [openssl_env.rsync_cmd % (
        '%s/include/' % install_root_opt,
        '%s/' % Dir('%s/include' % openssl_env.exportdirs['root']).abspath),
     openssl_env.rsync_cmd % (
         '%s/lib/' % install_root_opt,
         '%s/' % Dir('%s/lib' % openssl_env.exportdirs['root']).abspath),
     Touch('$TARGET')])

Default(openssl_install_build)
openssl_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  openssl_env.InstallFileOrDir(
      '%s/opt/google/bin/' % install_root,
      '%s/opt/google/bin/' % openssl_env.installdirs['common_root'],
      openssl_install_build, 'install')
  openssl_env.InstallFileOrDir(
      '%s/opt/google/lib/' % install_root,
      '%s/opt/google/lib/' % openssl_env.installdirs['common_root'],
      openssl_install_build, 'install')
  openssl_env.InstallFileOrDir(
      '%s/opt/google/share/' % install_root,
      '%s/opt/google/share/' % Dir(
          openssl_env.installdirs['common_root']).abspath,
      openssl_install_build, 'install')
  openssl_env.InstallFileOrDir(
      '%s/var/' % install_root,
      '%s/user_magic/var/' % openssl_env.installdirs['common_root'],
      openssl_install_build, 'install')

Return('openssl_extract openssl_install_build')
