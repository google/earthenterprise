#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

Import('third_party_env')
libattr_version_arch = 'attr-2.4.47.src'
libattr_version = 'attr-2.4.47'

num_cpu = GetOption('num_jobs')

ge_version = libattr_version.replace('attr', 'attr-ge')
current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, libattr_version)
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google' % install_root

libattr_source = File('#/../third_party/libattr/%s.tar.gz' %
                      libattr_version_arch).abspath

libattr_env = third_party_env.DeepCopy()
root_dir = Dir(libattr_env.exportdirs['root']).abspath

# [1] Extract libattr
libattr_target = '%s/.extract' % current_dir
libattr_extract = libattr_env.Command(
    libattr_target, libattr_source,
    [libattr_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xzf %s\n'
        'touch %s' % (
            current_dir, current_dir, libattr_source, libattr_target))])

if third_party_env['is_min_ubuntu'] and not third_party_env['native_cc']:
  env_opt = 'ac_cv_prog_cc_c99=no'
else:
  env_opt = ''

if libattr_env['release'] or libattr_env['optimize']:
  config_opt = ''
else:
  config_opt = ''

# [3] Configure libattr
libattr_target = '%s/.configure' % current_dir
libattr_configure = libattr_env.Command(
    libattr_target, libattr_extract,
    [libattr_env.MultiCommand(
        'cd %s\n'
        'sed -i -e "s|/@pkg_name@|&-@pkg_version@|" include/builddefs.in\n'
        '%s%s ./configure --prefix=%s %s\n'
        'touch %s' % (build_root,
                      libattr_env['ENV']['mod_env'], env_opt,
                      install_root, config_opt,
                      libattr_target))])

# [4] Build
libattr_target = '%s/.build' % current_dir
libattr_build = libattr_env.Command(
    libattr_target, libattr_configure,
    [libattr_env.MultiCommand(
        'cd %s\n'
        '%smake -j%d\n'
        'touch %s' % (build_root, libattr_env['ENV']['mod_env'], num_cpu,
                      libattr_target))])

# [5] Create libattr master installer
libattr_target = '%s/.install' % current_dir
libattr_install = libattr_env.Command(
    libattr_target, libattr_build,
    [libattr_env.MultiCommand(
        'cd %s\n'
        '%smake install install-dev install-lib\n'
        'cd %s\n'
        'rm -rf lib/libattr.a lib/libattr.la share/doc/%s\n'
        'mkdir -p share/doc/packages/%s\n'
        'cd %s\n'
        'cp -pr doc/COPYING doc/CHANGES README VERSION %s/share/doc/packages/%s\n'
        'touch %s' % (build_root,
                      libattr_env['ENV']['mod_env'],
                      install_root,
                      libattr_version,
                      ge_version,
                      build_root,
                      install_root, ge_version,
                      libattr_target))])

# [6] Install these into various directories as required for build
libattr_target = '%s/.install_for_build' % current_dir
libattr_install_build = libattr_env.Command(
    libattr_target, libattr_install,
    [
# Note: do not copy the tools.
#     libattr_env.rsync_cmd % ('%s/bin/' % install_root,
#                              '%s/bin/' % root_dir),
     libattr_env.rsync_cmd % ('%s/include/' % install_root,
                              '%s/include/' % root_dir),
     libattr_env.rsync_cmd % ('%s/lib/' % install_root,
                              '%s/lib/' % root_dir),
     Touch('$TARGET')])

Default(libattr_install_build)
libattr_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
# Note: do not copy the tools.
#  libattr_env.InstallFileOrDir(
#      '%s/bin/' % install_root,
#      '%s/' % libattr_env.installdirs['common_bin'],
#      libattr_install_build, 'install')
  libattr_env.InstallFileOrDir(
      '%s/lib/' % install_root,
      '%s/' % libattr_env.installdirs['common_lib'],
      libattr_install_build, 'install')
  libattr_env.InstallFileOrDir(
      '%s/share/' % install_root,
      '%s/' % libattr_env.installdirs['common_share'],
      libattr_install_build, 'install')

Return('libattr_extract libattr_install_build')
