#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('third_party_env')
libmng_version = 'libmng-1.0.10'
ge_version = libmng_version.replace('mng', 'mng-ge')

libmng_patches = ['libmng-de_ansification_macro.patch']

num_cpu = GetOption('num_jobs')

current_dir = Dir('.').abspath
build_root = '%s/%s' % (current_dir, libmng_version)
install_root = '%s/install' % current_dir
install_root_opt = '%s/opt/google' % install_root

libmng_source = File('#/../third_party/libmng/%s.tar.gz' %
                      libmng_version).abspath

libmng_env = third_party_env.DeepCopy()
root_dir = libmng_env.exportdirs['root']

# [1] Extract libmng
libmng_target = '%s/.extract' % current_dir
libmng_extract = libmng_env.Command(
    libmng_target, libmng_source,
    [libmng_env.MultiCommand(
        'mkdir -p %s\n'
        'cd %s\n'
        'tar xzf %s\n'
        'touch %s' % (
            current_dir, current_dir, libmng_source, libmng_target))])


# [2] Patch libmng
libmng_target = '%s/.patch_libmng' % current_dir
libmng_patch = libmng_env.Command(
    libmng_target,
    libmng_extract + map(libmng_env.GetBuildPath, libmng_patches),
    [libmng_env.MultiCommand(
        'cd %s\n'
        '%s\n'
        'touch %s' % (build_root,
                      '\n'.join(map(lambda i: 'patch -g0 -p1 -s < %s' % (
                          libmng_env.GetBuildPath(i)), libmng_patches)),
                      libmng_target))])


if third_party_env['is_hardy'] and not third_party_env['native_cc']:
  env_opt = 'ac_cv_prog_cc_c99=no'
else:
  env_opt = ''

if libmng_env['release'] or libmng_env['optimize']:
  config_opt = ''
else:
  config_opt = ''

# [3] Configure libmng
libmng_target = '%s/unmaintained/autogen.sh' % current_dir
libmng_configure = libmng_env.Command(
    libmng_target, libmng_patch,
    [libmng_env.MultiCommand(
        'cd %s\n'
        '%s%s ./unmaintained/autogen.sh --prefix=/ '
        ' --with-jpeg=%s --with-zlib=%s'
        ' --enable-shared --disable-static %s\n'
        'touch %s' % (build_root, libmng_env['ENV']['mod_env'], env_opt,
                      root_dir, root_dir,
                      config_opt, libmng_target))])

# [4] Build
libmng_target = '%s/.build' % current_dir
libmng_build = libmng_env.Command(
    libmng_target, libmng_configure,
    [libmng_env.MultiCommand(
        'cd %s\n'
        '%smake -j%d\n'
        'touch %s' % (build_root, libmng_env['ENV']['mod_env'], num_cpu,
                      libmng_target))])

# [5] Create libmng master installer
libmng_target = '%s/.install' % current_dir
libmng_install = libmng_env.Command(
    libmng_target, libmng_build,
    [libmng_env.MultiCommand(
        'cd %s\n'
        '%smake DESTDIR=%s mandir=/share/man install\n'
        'cd %s\n'
        'rm -rf lib/libmng.a lib/libmng.la share/doc/%s\n'
        'mkdir -p bin\n'
        'mkdir -p share/doc/packages/%s\n'
        'cd %s\n'
        'cp -pr LICENSE README CHANGES %s/share/doc/packages/%s\n'
        'touch %s' % (build_root,
                      libmng_env['ENV']['mod_env'], install_root,
                      install_root,
                      libmng_version,
                      ge_version,
                      build_root,
                      install_root, ge_version, libmng_target))])

# [6] Install these into various directories as required for build
libmng_target = '%s/.install_for_build' % current_dir
libmng_install_build = libmng_env.Command(
    libmng_target, libmng_install,
    [
     libmng_env.rsync_cmd % (
         '%s/bin/' % install_root,
         '%s/bin/' % root_dir),
     libmng_env.rsync_cmd % (
         '%s/include/' % install_root,
         '%s/include/' % root_dir),
     libmng_env.rsync_cmd % (
         '%s/lib/' % install_root,
         '%s/lib/' % root_dir),
     Touch('$TARGET')])

Default(libmng_install_build)
libmng_env.ExecuteOnClean('rm -rf %s' % current_dir)

if 'install' in COMMAND_LINE_TARGETS:
  libmng_env.InstallFileOrDir(
      '%s/bin/' % install_root,
      '%s/' % libmng_env.installdirs['common_bin'],
      libmng_install_build, 'install')
  libmng_env.InstallFileOrDir(
      '%s/lib/' % install_root,
      '%s/' % libmng_env.installdirs['common_lib'],
      libmng_install_build, 'install')
  libmng_env.InstallFileOrDir(
      '%s/share/' % install_root,
      '%s/' % libmng_env.installdirs['common_share'],
      libmng_install_build, 'install')

Return('libmng_extract libmng_install_build')
