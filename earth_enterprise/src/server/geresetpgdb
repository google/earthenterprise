#!/bin/bash
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# geresetpgdb modes:
# Default mode is 'soft' if parameter is not specified.
#
# geserve-databases: gestream, geendsnippet, gesearch, gepoi;
#
# Resets geserve-databases to default/initial state.
# 'geresetpgdb soft'
#    - back up (dump) current geserve-databases;
#    - delete geserve-databases;
#    - recreate geserve-databases in their initial state of GEE system;
#
# Dumps geserve-databases
# 'geresetpgdb backup [path_to_dump_directory]'
#    - back up (dump) current geserve-databases;
#    - if path_to_dump_directory is specified, the files will be dumped to
#      that directory. The user running the script (usually gepguser) must
#      have write permissions to that directory already or to the parent
#      directory;
#
# Restores geserve-databases from specified dump directory.
# 'geresetpgdb restore path_to_dump_directory'
#    - back up (dump) current geserve-databases;
#    - delete geserve-databases;
#    - recreate geserve-databases from specified 'path_to_dump_directory';
#    - update the system configured search services;
#
# Administrator tools:
# Implements 'upgrade'-reset with restoring database state we have before
# running reset.
# Used by installer in upgrade procedure for GEE 5.0 and later versions.
# 'geresetpgdb upgrade [path_to_dump_directory]'
#    - back up(dump) current geserve-databases (unless path_to_dump_directory
#      is specified);
#    - delete data directory;
#    - recreate postgres db instance;
#    - recreate superuser;
#    - recreate geserve-databases from dump;
#    - update the system configured search services;
#
# Note: 'upgrade'-reset deletes geplaces, searchexample databases,
# but does not restore them.
# To restore geplaces, searchexample need to run scripts:
# /opt/google/share/geplaces/geplaces create
# /opt/google/share/searchexample/searchexample create
#
# Implements 'hard'- reset: no back up/restore
# Used by installer in upgrade procedure from GEE 4.4.1 and less
# to GEE 5.0.0 and later.
# 'geresetpgdb hard'
#    - delete data directory;
#    - recreate postgres db instance;
#    - recreate superuser;
#    - recreate geserve-databases in their initial state of GEE system;
# Note: 'hard'-reset does not back up/restore geserve-databases.
# Note: 'hard'-reset deletes geplaces, searchexample databases,
# but does not restore them.
# To restore geplaces, searchexample databases need to run scripts:
# /opt/google/share/geplaces/geplaces create
# /opt/google/share/searchexample/searchexample create

VARPGDIR=/var/opt/google/pgsql
SHAREDIR=/opt/google/share/postgresql/contrib
BINDIR=/opt/google/bin
SQLDIR=/opt/google/share/opengee-server/sql
SCRIPTDIR=`dirname "$0"`

# Import utility functions
. "$SCRIPTDIR/gepgcommon"

# Handles errors - prints out error code, command, and line number; shuts down
#                  PostgreSQL if running
on_error () {
    errcode=$? # save the exit code as the first thing done in the trap function
    echo "error $errorcode"
    echo "the command executing at the time of the error was"
    echo "$BASH_COMMAND"
    echo "on line ${BASH_LINENO[0]}"
    # $BASH_COMMAND contains the command that was being executed at the time of the trap
    # ${BASH_LINENO[0]} contains the line number in the script of that command

    # Shut down database if running
    if [ -f "$VARPGDIR/data/postmaster.pid" ]; then
      "$BINDIR/pg_ctl" -D "$VARPGDIR/data" -l "$VARPGDIR/logs/pg.log" stop -w
    fi

    exit $errcode
}

trap on_error ERR

if [ ! -n "$1" ]; then
  type="soft";
else
  type="$1";
fi

if [ "$type" == "hard" ]; then
  echo "   WARNING: 'geresetpgdb $type' will completely delete all GEE postgresql"
  echo "databases, and then recreate the gestream, gesearch, gepoi, gesnippets"
  echo "databases in their initial state."
  echo "It does not perform backup."
  echo "All the information about pushed/published databases, snippets profiles"
  echo "and custom search tabs will be deleted."
  echo "It will also delete geplaces, searchexample databases."
  echo "To restore geplaces and searchexample databases, run scripts:"
  echo "  /opt/google/share/geplaces/geplaces create"
  echo "  /opt/google/share/searchexample/searchexample create"
  echo ""
  echo "-> 1- Exit"
  echo "   2- Continue"
  echo "ENTER THE NUMBER OF THE DESIRED CHOICE, OR PRESS <ENTER> TO ACCEPT THE"
  echo "DEFAULT: "
  read -n2 user_choice
  case "$user_choice" in
    1)
      echo "Exiting ..."
      exit
      ;;
    2)
      echo "Continue ..."
      ;;
    *)
      echo "Exiting ..."
      exit
      ;;
  esac
elif [ "$type" == "soft" ]; then
  echo "    WARNING: 'geresetpgdb $type' will back up the gestream, gesearch,"
  echo "gepoi and gesnippets databases, and then recreate them in their initial"
  echo "state."
  echo "All the information about pushed/published databases, snippets profiles"
  echo "and custom search tabs will be deleted."
  echo ""
  echo "-> 1- Exit"
  echo "   2- Continue"
  echo "ENTER THE NUMBER OF THE DESIRED CHOICE, OR PRESS <ENTER> TO ACCEPT THE"
  echo "DEFAULT: "
  read -n2 user_choice
  case "$user_choice" in
    1)
      echo "Exiting ..."
      exit
      ;;
    2)
      echo "Continue ..."
      ;;
    *)
      echo "Exiting ..."
      exit
      ;;
  esac
elif [ "$type" == "restore" ] || [ "$type" == "upgrade" ] || [ "$type" == "backup" ]; then
  if [ "$type" == "restore" ] && [ ! -n "$2" ]; then
    echo "WARNING: Path to dump directory is not specified."
    echo "Usage: $0 restore path_to_dump_dir"
    exit
  else
    if [ -n "$2" ]; then
      dump_path="$2"
    fi
  fi
fi

# Deletes old database instances
function do_reset {

  # Drop gee databases
  if [ `"$BINDIR/psql" -lqt | cut -d \| -f 1 | grep -w gestream | wc -l` == 1 ]; then
    "$BINDIR/dropdb" -U geuser gestream
  fi
  if [ `"$BINDIR/psql" -lqt | cut -d \| -f 1 | grep -w geendsnippet | wc -l` == 1 ]; then
    "$BINDIR/dropdb" -U geuser geendsnippet
  fi
  if [ `"$BINDIR/psql" -lqt | cut -d \| -f 1 | grep -w gesearch | wc -l` == 1 ]; then
    "$BINDIR/dropdb" -U geuser gesearch
  fi
  if [ `"$BINDIR/psql" -lqt | cut -d \| -f 1 | grep -w gepoi | wc -l` == 1 ]; then
    "$BINDIR/dropdb" -U geuser gepoi
  fi

}

# Deletes old data and recreates db instance.
function do_hard_reset {
  # Do hard reset and init DB
  # Deletes old data and recreates db instance.

  if [ -f "$VARPGDIR/data/postmaster.pid" ]; then
    "$BINDIR/pg_ctl" -D "$VARPGDIR/data" -l "$VARPGDIR/logs/pg.log" stop
  fi

  # delete all the db files. not sure if we should do this.
  rm -Rf "$VARPGDIR/data"

  # create a new db instance from scratch
  "$BINDIR/initdb" --auth=trust -D "$VARPGDIR/data" >/dev/null
}

# Check if postmaster is running. If it is then prompt the user to stop the
# server
if [ -e "$VARPGDIR/data/postmaster.pid" ]; then
  echo "Please stop the server first using the following command"
  echo "/etc/init.d/geserver stop"
  exit 1
fi

# if the data dir does not exist then this has to be a hard reset.
# TODO: This will need to be removed when we unbundle PostgreSQL
if [ ! -e "$VARPGDIR/data" ]; then
  type="hard"
fi


if [ "$type" == "backup" ]; then
  do_dump
elif [ "$type" == "hard" ]; then
  do_hard_reset
else

  # Check if PostgreSQL version have been changed.
  # TODO: this will need to be updated to work with unbundled versions of PostgreSQL and to detect and migrate data
  # from bundled versions to unbundled versions
  old_version=`cat "$VARPGDIR/data/PG_VERSION" | cut -c1-3`
  new_version=`"$BINDIR/psql" --version | cut -f3 -d' ' | cut -c1-3`
  if [ "$old_version" != "$new_version" ]; then
    # PostgreSQL version have been changed - the case of upgrade.
    if [ "$type" != "upgrade" ]; then
      echo "WARNING: PostgresSQL have been updated. Please, run 'upgrade' reset first."
      exit 1
    fi
    if [ "$dump_path" == "" ]; then
      echo "WARNING: PostgresSQL have been updated. You must indicate the path to the backup data."
      exit 1
    fi
  elif [ "$type" != "restore" ]; then
    # Do backup for any reset except 'hard' or 'restore' or if we are upgrading to a new database version.
    # In that case, it must have been done with the previous version of the PostgreSQL binaries
    do_dump
  fi

  if [ "$type" == "upgrade" ]; then
    do_hard_reset
  fi
fi

# Start postmaster
if [ ! -f "$VARPGDIR/data/postmaster.pid" ]; then
  echo Starting server
  "$BINDIR/pg_ctl" -D "$VARPGDIR/data" -l "$VARPGDIR/logs/pg.log" start -w
fi

# Soft reset
if [ "$type" == "soft" -o "$type" == "restore" ]; then
  do_reset
elif [ "$type" != "backup" ]; then
  "$BINDIR/createuser" --superuser geuser
fi

if [ "$type" == "upgrade" -o "$type" == "restore" ]; then
  echo "Creating geserve-databases..."
  "$BINDIR/createdb" -T template0 gestream
  "$BINDIR/createdb" -T template0 geendsnippet
  "$BINDIR/createdb" -T template0 gesearch
  "$BINDIR/createdb" -T template0 gepoi

  echo Adding PostGIS extension
  "$BINDIR/psql" -U geuser -d gepoi -c "CREATE EXTENSION postgis"

  echo "Done."
elif [ "$type" != "backup" ]; then
  echo "Creating geserve-databases..."
  "$BINDIR/createdb" --owner=geuser -U geuser gestream
  "$BINDIR/psql" -q -d gestream geuser -f "$SQLDIR/gestream_tables.sql"

  "$BINDIR/createdb" --owner=geuser -U geuser geendsnippet
  "$BINDIR/psql" -q -d geendsnippet geuser -f "$SQLDIR/geendsnippet_tables.sql"

  "$BINDIR/createdb" --owner=geuser -U geuser gesearch
  "$BINDIR/psql" -q -d gesearch geuser -f "$SQLDIR/gesearch_tables.sql"
  if [ -f "$SQLDIR/examplesearch.sql" ]; then
    "$BINDIR/psql" -q -d gesearch geuser -f "$SQLDIR/examplesearch.sql"
  fi

  "$BINDIR/createdb" -U geuser --owner=geuser gepoi
  "$BINDIR/psql" -U geuser -d gepoi -c "CREATE EXTENSION postgis"

  echo "Done."
fi

if [ "$type" == "upgrade" -o "$type" == "restore" ]; then
  shopt -s nullglob  # set nullglob so that bash allows patterns which match no files
                     # to expand to a null  string,  rather than themselves.
  if [ "$dump_path" != "" ]; then
    echo "Restoring geserve-databases from dump $dump_path ..."
    cd "$dump_path"
  elif [ "$type" == "upgrade" ]; then
    echo "Restoring geserve-databases from dump $VARPGDIR/data.backup_dump.$$ ..."
    cd "$VARPGDIR/data.backup_dump.$$"
  fi

  # Check to see if the individual tables from gepoi were dumped
  gepoi_dump_files=`ls gepoi* | wc | awk '{ print $1 }'`

  for DB in *.dump; do
    if [ -s "$DB"  ]; then
      if [ "$DB" != "gepoi.dump" ]; then
        echo "Restoring $DB..."
        if [ "${DB:0:6}" == "gepoi." ]; then
          # The dump is a single table for the gepoi database, not the full database, restore to the correct db
          "$BINDIR/psql" -q -d gepoi -f "$DB"
        else
          "$BINDIR/psql" -q -d "${DB%?????}" -f "$DB"
        fi
      fi
    fi
  done

  # Update tables/records of gesearch databases.
  "$BINDIR/psql" -q -d gesearch geuser -f "$SQLDIR/gesearch_tables.sql"
  if [ -f "$SQLDIR/examplesearch.sql" ]; then
    "$BINDIR/psql" -q -d gesearch geuser -f "$SQLDIR/examplesearch.sql"
  fi

  # Update tables/records of gestream databases.
  "$BINDIR/psql" -q -d gestream geuser -f "$SQLDIR/gestream_tables.sql"

  echo "Done."
fi

# Stop postmaster
"$BINDIR/pg_ctl" -D "$VARPGDIR/data" -l "$VARPGDIR/logs/pg.log" stop

