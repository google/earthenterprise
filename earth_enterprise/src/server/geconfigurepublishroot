#!/usr/bin/perl -w
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use strict;
use warnings;

# make sure we're running as root
die "You must run as root\n" unless $> == 0;

# Make sure we're using their actual usernames.
my $GEAPACHEUSER="geapacheuser";
my $user_file = "/etc/init.d/gevars.sh";
if (-e$user_file) {
  my $var = `grep GEAPACHEUSER $user_file`;
  chomp $var;
  my @parts = split(/=/, $var);
  if (@parts eq 2) {
    $GEAPACHEUSER=$parts[1];
  }
}

use Getopt::Long;

# Check for --help
my $default_path = '/gevol/published_dbs';

my $prog_name = $0;
my $usage = <<EOF;
$prog_name : configures the Google Earth Fusion Publish root directory\n
Usage: $prog_name [--help] [--path=PATH] [--allow_symlinks] [--noprompt]
    --path=PATH : specifies the path to the publish root and defaults $default_path
    --allow_symlinks : configures the publisher to accept symbolic links.
                      This is useful if the publish root is on a separate logical 
                      volume from the asset root. Default is "No".
    --noprompt : specifies that no prompting of the user will be attempted
                if the arguments are insufficient or the configuration fails, the
                program will return -1 (0 is returned on success).
    --chown    : Correct privileges of files already in the publish root.  This may
                take a long time on large publish roots.

Example usage:
  $prog_name --noprompt --path=$default_path --allow_symlinks
EOF

# Parse the command line arguments.
my $allow_symlinks = 0;
my $show_usage = 0;
my $noprompt = 0;
my $chown = 0;

my $ret = Getopt::Long::GetOptions("path=s" => \$default_path,
                                   "noprompt" => \$noprompt,
                                   "chown" => \$chown,
                                   "allow_symlinks" => \$allow_symlinks,
                                   "help" => \$show_usage);
if ($show_usage) {
  print $usage;
  exit;
}

# Default AllowSymlinks is now Y, only check for allow_symlinks arg to remove prompt.
my $allow_symlinks_prompt = 1;
if ($allow_symlinks eq 1 || $noprompt eq 1) {
   $allow_symlinks_prompt = 0;
}
$allow_symlinks = 'Y';

my $dest_path = $default_path;
if ($noprompt eq 0) {
   print "\nPlease specify where you would like to store your published databases.\n";
   print "If this directory is on the same partition as the built databases then \n";
   print "they will just be hard-linked.\n";
   print "Please refer to the admin guide for more information.\n";
   print "\nAbsolute Path [$default_path]: ";
   $dest_path = <STDIN>;
   chop ($dest_path);
   if (! ($dest_path =~ /\//)) {
     $dest_path = $default_path;
   }
}

my $stream_dir = "$dest_path/stream_space";
my $search_dir = "$dest_path/search_space";

use File::Path qw(make_path);
use File::Find;
use POSIX qw(lchown);

my ($username, $pwd, $uid, $gid) = getpwnam($GEAPACHEUSER);

# Create stream and search directories if they don't exist
make_path(($stream_dir, $search_dir),
          {
              verbose => 0,
              mode => 0755,
              uid => $uid,
              group => $gid
          });

# Change the owner of the dirs to "geapache" coz that's the uid WebDAV uses to
# write to these dirs.
if ( $chown == 1 ) {
    # Change owner and permissions recursively, in case the dirs are already
    # populated from a previous install.
    sub wanted {
        # Just change the owner of symlinks (can't do this with builtin chown)
        if (-l) {
            lchown $uid, $gid, $_;
            return;
        }
        chown $uid, $gid, $File::Find::name;
        # root's umask could leave the dirs with less permissions than we want
        # geapacheuser:gegroup will need to write to these dirs which is why 775.
        chmod 0775, $File::Find::name if -d;
        # Don't set execute bit on files
        chmod 0664, $File::Find::name if -f;
    }
    File::Find::find({wanted=>\&wanted, follow=>0}, ($stream_dir, $search_dir));
}

# only do this if fusion is installed
if ($allow_symlinks_prompt eq 1) {
   if (-f '/opt/google/bin/getop') {
     print "\nWhile publishing locally if the publisher fails to create\n";
     print "hard-links, the publisher can attempt to create symbolic links.\n";
     print "Please refer to the admin guide for more information.\n";
     print "Do you wish to allow symbolic links (Y/N)? [$allow_symlinks]: ";
     my $ans = <STDIN>;
     chop ($ans);
     if ($ans =~ /[YyNn]/) {
       $allow_symlinks = uc($ans);
     }
   }
}

# create a .config file under the publishroot
my $config_file = "$dest_path/.config";
open CONF, ">$config_file" or die "Internal error: Can't write config file.\n";
flock CONF, 2;
truncate CONF, 0;
print CONF "AllowSymLinks: $allow_symlinks\n";
close CONF;

print "Publishroot creation succeeded.\n";
# TODO: for the time being createpublishroot calls selectpublishroot
system("/opt/google/bin/geselectpublishroot $dest_path");

# print "Please run geselectpublishroot $dest_path to apply the change.\n";

