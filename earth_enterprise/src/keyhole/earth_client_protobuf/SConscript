#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os.path
Import('env')

# Protocol Buffer Definitions
proto_files = [
    'quadtreeset.protodevel',
    'diorama_streaming.protodevel',
]

proto_inputs = []
for i in proto_files:
  proto_out = env.ProtocolBuffer(i)
  proto_inputs.append(proto_out[0]) # Only compile the cc files.

env['CPPFLAGS'] += [
  '-Wfatal-errors'
  ]

# Compile the cc files and add them to the "proto.a" lib.
objects = map(lambda f: env.StaticObject(f), proto_inputs)
geprotos = env.staticLib('geprotos', objects)

for gen_pb_file in proto_inputs:
  # scons seems to have issues resolving dependencies of dependencies when 
  # the first file is generated (in this case the .cc file). Scons does
  # not seem to properly resolve the .cc file needs the .h file (also generated)
  # and there by this means the .so file needs the .h file too.
  # This can lead to build errors if the generated files are not created
  # soon enough. So adding dependencies explicitly
  proto_out_basename = os.path.splitext(str(gen_pb_file))[0]
  env.Depends(proto_out_basename+'.os', proto_out_basename+'.h')
  env.Depends(proto_out_basename+'.os', proto_out_basename+'.cc')

env.test('protobuf_unittest', 'protobuf_unittest.cpp',
         LIBS=[geprotos, 'geprotobuf'])
