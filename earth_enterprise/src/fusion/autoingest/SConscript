#-*- Python -*-
#
# Copyright 2017 Google Inc. Copyright 2018 the Open GEE Contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


Import('env')
import string
import os 
origenv = env;

# let subdirs refer to headers as relative to the autoingest directory
env = origenv.Clone();
env.Append(CPPPATH = ['#fusion/autoingest', # static header files
                      ])


idlfiles = [ 'AssetStorage',
             'storage/deprecated/ReprojectConfig',
             'storage/deprecated/BlendConfig',
             'storage/deprecated/TmeshConfig',
             'storage/deprecated/CopyrightConfig',
             'storage/deprecated/RasterKHDBConfig',
             'storage/deprecated/VectorKHDBConfig',
             'TaskLists', 'gstProvider', 'Locale', 'ServerCombination',
             'Snippet',
             'AssetChanges', 'VolumeStorage', 'StreamServers',
             'SearchTabSet', 'MapTextStyle',
             'storage/AssetDefs',
             'storage/VectorDefs',
             'storage/FieldGenerator',
             'storage/FilterConfig',
             'storage/InsetStackItem',
             'storage/SearchField',
             'storage/RasterGEIndexConfig',
             'storage/VectorGEIndexConfig',
             'storage/CombinedTerrainConfig',
             'storage/QTPacketConfig',
             'storage/UnifiedIndexConfig',
             'storage/RasterDBRootConfig',
             'storage/IconReference',
             'storage/LayerLegend',
             'storage/GEDBAssetConfig',
             'storage/DatabaseConfig',
             'storage/MapSubLayerConfig',
             'storage/MapLayerConfig',
             'storage/ProjectedMapLayerConfig',
             'storage/MapLayerLevelConfig',
             'storage/MapProjectConfig',
             'storage/ProjectedMapProjectConfig',
             'storage/SourceConfig',
             'storage/MosaicConfig',
             'storage/MaskgenConfig',
             'storage/KRPConfig',
             'storage/KRMPConfig',
             'storage/RasterProductConfig',
             'storage/VectorProductConfig',
             'storage/PacketLevelConfig',
             'storage/PacketGenConfig',
             'storage/RasterProjectConfig',
             'storage/LayerConfig',
             'storage/QueryConfig',
             'storage/VectorFuseAssetConfig',
             'storage/VectorLayerXConfig',
             'storage/VectorProjectConfig',
             'storage/VectorDBRootConfig',
             'storage/KMLProjectConfig',
             'storage/MapDatabaseConfig',
             'storage/MapGEIndexConfig',
             'storage/MapDBAssetConfig',
             'storage/MapLayerJSConfig',
             'storage/VectorLayerAssetConfig',
             'storage/SearchTabReference',
             'storage/VectorPOIAssetConfig',
             'storage/MapPOIAssetConfig',
             'storage/CombinedRPConfig',
             'storage/DatedImageryIndexInfo',
             ]

env.idl(map(lambda n: n+'.idl', idlfiles))


plugins = [ 'Source',
            'deprecated/Reproject',
            'deprecated/Blend',
            'deprecated/Tmesh',
            'deprecated/Copyright',
            'deprecated/RasterKHDB',
            'deprecated/ImeshKHDB',
            'deprecated/VectorKHDB',
            'Mosaic',
            'Maskgen',
            'KRP',
            'KRMP',
            'RasterProject',
            'MercatorRasterProject',
            'RasterProduct',
            'MercatorRasterProduct',
            'VectorProduct',
            'VectorLayerX',
            'VectorProject',
            'VectorLayer',
            'VectorQuery',
            'VectorFuse',
            'VectorDBRoot',
            'Database',
            'PacketGen',
            'PacketLevel',
            'MapProject',
            'ProjectedMapProject',
            'MapLayer',
            'ProjectedMapLayer',
            'MapLayerLevel',
            'KMLProject',
            'RasterGEIndex',
            'VectorGEIndex',
            'CombinedTerrain',
            'UnifiedIndex',
            'RasterDBRoot',
            'GEDB',
            'QTPacket',
            'MapDatabase',
            'MercatorMapDatabase',
            'MapGEIndex',
            'MapDB',
            'MapLayerJS',
            'VectorPOI',
            'MapPOI',
            'CombinedRP',
            ]

for plugin in plugins:
    src = 'plugins.src/'+plugin+'.src'
    env.Command('plugins/'+plugin+'Asset.h',
                [ 'AssetGenPublicH.pl', 'AssetGen.pm', src ],
                [ "${SOURCES[0]} ${SOURCES[2]} $TARGET" ])
    env.Command('plugins/'+plugin+'Asset.cpp',
                [ 'AssetGenPublicCpp.pl', 'AssetGen.pm', src ],
                [ "${SOURCES[0]} ${SOURCES[2]} $TARGET" ])
    env.Depends('plugins/'+plugin+'Asset.os', 'plugins/'+plugin+'Asset.h')
    env.Depends('plugins/'+plugin+'Asset.os', 'plugins/'+plugin+'Asset.cpp')

env.Command('ReadOnlyFromStorage.cpp',
            [ 'FromStorageGen.pl' ],
            [ "$SOURCE --cppfile $TARGET " + string.join(plugins, ' ') ])

env.Command('khAssetManagerProxy.h',
            [ 'ProtocolGen.pl', 'AssetManager.protocol' ],
            [ "${SOURCES[0]} --static --proxyh $TARGET ${SOURCES[1]}" ])

env.Command('khAssetManagerProxy.cpp',
            [ 'ProtocolGen.pl', 'AssetManager.protocol' ],
            [ "${SOURCES[0]} --static --proxycpp $TARGET ${SOURCES[1]}" ])



commoncpp = [
    'AssetVersionRef.cpp', 'khFusionURI.cpp',
    'Asset.cpp', 'AssetVersion.cpp',
    'Misc.cpp', 'AvailId.cpp', 'khVolumeManager.cpp',
    'FusionConnection.cpp', 'AssetChangeListener.cpp',
    'AssetDefsExtra.cpp', 'VectorProjectConfigImpl.cpp',
    'LayerConfigImpl.cpp', 'MapProjectConfigImpl.cpp',
    'QueryConfigImpl.cpp', 'AssetTraverser.cpp',
    'geAssetRoot.cpp', 'SearchTabReferenceImpl.cpp',
    'JsonUtils.cpp', 'JsUtils.cpp'
    ] + \
    map(lambda n: '.idl/'+n+'.cpp', idlfiles) + \
    map(lambda p: 'plugins/'+p+'Asset.cpp', plugins)

commonh = map(lambda n: '.idl/'+n+'.h', idlfiles)

for idlfile in idlfiles:
    osfile = idlfile + '.os'
    env.Depends(osfile, commonh)

commonobj = map(lambda src: env.SharedObject(src), commoncpp)

for obj in commonobj:
    env.Depends(obj, commonh)

for cppfile in commoncpp:
    env.Depends(os.path.splitext(cppfile)[0] + '.obj', commonh)


geautoingest = env.sharedLib('geautoingest',
                             commonobj + [ 'ReadOnlyExtra.cpp',
                                           'ReadOnlyFromStorage.cpp',
                                           'khAssetManagerProxy.cpp',
                                           env['FUSIONVER'] ],
                             LIBS=['gesearchtabs', 'gemiscconfig', 'genet',
                                   'geindex_r', 'geutil', 'qt-mt']
                             )


env.idl(['MiscConfigStorage.idl', 'Systemrc.idl']);
gemiscconfig = env.sharedLib('gemiscconfig',
                             ['MiscConfig.cpp', '.idl/MiscConfigStorage.cpp',
                              '.idl/Systemrc.cpp'],
                             LIBS=['gexml'])

env.Depends('MiscConfig.os', ['.idl/Systemrc.h', '.idl/MiscConfigStorage.h'])
env.Depends('.idl/MiscConfigStorage.os', ['.idl/Systemrc.h', '.idl/MiscConfigStorage.h'])
env.Depends('.idl/Systemrc.os', ['.idl/Systemrc.h', '.idl/MiscConfigStorage.h'])

env.install('common_lib', [geautoingest, gemiscconfig])

env.test('AssetDefsExtra_unittest',
         'AssetDefsExtra_unittest.cpp',
         LIBS=['geautoingest', 'gemiscconfig', 'gtest'])

env.test('AssetSerializer_unittest',
         'AssetSerializer_unittest.cpp',
          LIBS=['gecommon', 'gexml', 'qt-mt', 'xerces-c', 'gtest'])

env.test('AssetFactory_unittest',
         'AssetFactory_unittest.cpp',
         LIBS=['gecommon', 'gtest', 'geautoingest', 'qt-mt', 'xerces-c'])

env.test('JsUtils_unittest',
         'JsUtils_unittest.cpp',
         LIBS=['geautoingest', 'gemiscconfig', 'gtest'])

env.test('StorageManager_unittest',
         'StorageManager_unittest.cpp',
         LIBS=['gecommon', 'gemiscconfig', 'gtest', 'qt-mt', 'xerces-c', 'gexml'])

env.test('StorageManagerAssetHandle_unittest',
         'StorageManagerAssetHandle_unittest.cpp',
         LIBS=['gecommon', 'gtest'])

SConscript('sysman/SConscript', exports=['env', 'commonobj', 'plugins'])
SConscript('tools/SConscript', exports='env')
SConscript('memory-tests/SConscript', exports=['env'])
