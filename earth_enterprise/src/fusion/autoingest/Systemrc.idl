// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <cstdint>
#include <string>
#include <vector>

class Systemrc {
  std::string assetroot        = std::string("/gevol/assets");
  unsigned int        maxjobs          = uint(0); // default of 0 represents "not set"
  bool        locked           = false;
  std::string fusionUsername   = std::string("gefusionuser");
  std::string userGroupname    = std::string("gegroup");
  unsigned int        logLevel         = uint(2);

  deprecated std::string defaultImageryIndex  = std::string();
  deprecated std::string defaultImageryCopyright  = std::string();
  deprecated std::string defaultTerrainIndex  = std::string();
  deprecated std::string defaultVectorIndex  = std::string();
  deprecated std::string defaultVectorPostamble  = std::string();
  deprecated std::string defaultImeshIndex  = std::string();
  deprecated std::string defaultVectorPostambleV5  = std::string();


#pragma LoadAndSave

#hquote
protected:
  bool Load(void) {
    return Load(Filename());
  }
  friend void LoadSystemrc(Systemrc &systemrc, bool override_cache);
public:
  static std::string Filename(void);
  bool Save(void) const;
  
  static const std::string& AssetRoot(void);
  static const std::string& TryAssetRoot(void);
  static void OverrideAssetRoot(const std::string& assetroot);
  static void OverrideUserAndGroupVars(void);
  static const std::string& FusionUsername(void);
  static const std::string& UserGroupname(void);

 private:
  static std::string sAssetRoot;
  static std::string sFusionUsername;
  static std::string sUserGroupname;

#/hquote

#cppquote
#include <geInstallPaths.h>
#include <khFileUtils.h>

  std::string Systemrc::sAssetRoot;
  std::string Systemrc::sFusionUsername;
  std::string Systemrc::sUserGroupname;


  std::string Systemrc::Filename(void) {
    return khComposePath(kGEEtcPath, "systemrc");
  }
  bool Systemrc::Save(void) const {
    std::string fname = Filename();
    bool result = Save(fname);
    if (result) {
      (void) khChmod(fname, 0644);
    }
    return result;
  }

  const std::string &
  Systemrc::AssetRoot(void)
  {
    if (sAssetRoot.empty()) {
      // see if we can load the file
      Systemrc systemrc;
      if (systemrc.Load()) {
        OverrideAssetRoot(systemrc.assetroot);
      } else {
        notify(NFY_FATAL, "Unable to open systemrc file");
      }
    }
    return sAssetRoot;
  }

  const std::string &
  Systemrc::TryAssetRoot(void)
  {
    if (sAssetRoot.empty()) {
      // see if we can load the file
      Systemrc systemrc;
      if (khExists(Filename()) && systemrc.Load()) {
        OverrideAssetRoot(systemrc.assetroot);
      }
    }
    return sAssetRoot;
  }

  void
  Systemrc::OverrideAssetRoot(const std::string &assetroot)
  {
    // verify that assetroot is an absolute path
    if (!assetroot.length() || assetroot[0] != '/') {
      throw khException(kh::tr("Invalid assetroot name: '%1'")
                        .arg(assetroot.c_str()));
    }

    // we cannot verify that the assetroot actually exists or is properly
    // configured since this routine is called by the configure tool
    // while it's doing the initial configuration

    sAssetRoot = khNormalizeDir(assetroot,
                                false /* no trailing slash */);
  }

  void
  Systemrc::OverrideUserAndGroupVars() {
    // Load all the user and group variables from the systemrc file
    Systemrc systemrc;
    if (khExists(Filename())) {
	  systemrc.Load();  // Even if it does not load, defaults will be set
    }
    sFusionUsername = systemrc.fusionUsername;
    sUserGroupname = systemrc.userGroupname;
  }

  const std::string &
  Systemrc::FusionUsername(void) {
    if (sFusionUsername.empty()) {
      OverrideUserAndGroupVars();
    }
    return sFusionUsername;
  }

  const std::string &
  Systemrc::UserGroupname(void) {
    if (sUserGroupname.empty()) {
      OverrideUserAndGroupVars();
    }
    return sUserGroupname;
  }

#/cppquote

};
