// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <string>
#include <qstring.h>
#include <vector>
#include <set>
#include <khTypes.h>
#include "LayerLegend.h"
#include "CacheSizeCalculations.h"

#cppquote
#include "LayerLegend_impl.h"
#/cppquote


// ****************************************************************************
// ***  RasterDBRoot
// ****************************************************************************
class RasterDBRootAssetConfig {
  class Layer {
    LayerLegend legend_;
    uint32      channel_id_;
    std::string asset_uuid_ = std::string();
#pragma GenerateIsUpToDate
  #hquote
  public:
    uint64 GetSize() {
      return sizeof(*this)
              + legend_.GetSize()
              + GetObjectSize(asset_uuid_);
    }
  #/hquote
  };

  std::vector<RasterDBRootAssetConfig::Layer> layers_;
  std::set<uint32> used_provider_ids_;
#hquote
  uint64 GetSize() {
    uint64 layers_Size = 0;
    for (auto layer : layers_) {
      layers_Size += layer.GetSize();
    }
    return sizeof(*this)
            + layers_Size
            + GetObjectSize(used_provider_ids_);
  }
#/hquote

  // To force rebuilds, increment this version.
  // When incrementing this version, you should also increment the
  // one in RasterProject and Database so this one gets the chance to get
  // checked
#version 1

#pragma GenerateIsUpToDate
};


class RasterDBRootGenConfig {
  typedef std::vector<RasterDBRootGenConfig::Layer> LayerList;
  typedef LayerList::const_iterator LayerIterator;

  class Layer {
    LayerLegend legend_;
    uint32      channel_id_;
    std::string asset_uuid_ = std::string();
  #hquote
  public:
    uint64 GetSize() {
      return sizeof(*this)
              + legend_.GetSize();
              + GetObjectSize(asset_uuid_);
    }
  #/hquote
  };
  std::vector<RasterDBRootGenConfig::Layer> layers_;
  std::set<uint32>                          used_provider_ids_;
#hquote
  uint64 GetSize() {
    uint64 layers_Size = 0;
    for (auto layer : layers_) {
      layers_Size += layer.GetSize();
    }
    return sizeof(*this)
            + layers_Size
            + GetObjectSize(used_provider_ids_);
  }
#/hquote

#pragma LoadAndSave
};
