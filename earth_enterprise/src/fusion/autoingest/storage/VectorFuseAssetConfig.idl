// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <autoingest/.idl/storage/LayerConfig.h>
#include <autoingest/.idl/storage/SearchField.h>
#requiresgetheapusage


#cppquote
#include <autoingest/.idl/storage/LayerConfig_impl.h>
#include <autoingest/.idl/storage/SearchField_impl.h>
#/cppquote

// ********** used by gevectorfuse **********
class FuseItem {
  FuseFeatureConfig feature;
  FuseSiteConfig site;
  std::string filename; // file containing output from completed queries
};

class FuseConfig {
  std::vector<FuseItem> items;
  QString contextScript = QString("");
  deprecated std::vector<SearchField> searchFields = std::vector<SearchField>();
  deprecated std::string searchStyle = std::string();


#pragma LoadAndSave
};


// ********** used by VectorFuseAsset **********
class VectorFuseAssetItem {
  FuseFeatureConfig feature;
  FuseSiteConfig site;

#hquote
  inline bool HasJS(void) const {
    return (feature.HasJS() || site.HasJS());
  }
#/hquote
  
#pragma GenerateIsUpToDate
};

class VectorFuseAssetConfig {
#hquote
  static const int curr_config_version = 1;
#/hquote
  deprecated uint channelId = uint(0);
  std::vector<VectorFuseAssetItem> items;
  IsUpToDateIgnoreIf(!HasJS()) QString contextScript = QString("");
  deprecated std::vector<SearchField> searchFields = std::vector<SearchField>();
  deprecated std::string searchStyle = std::string();

  // when loaded version != curr_config_version a build will be forced
  xmlattr int config_version = new:VectorFuseAssetConfig::curr_config_version, load:0;

#pragma GenerateIsUpToDate

#hquote
  bool HasJS(void) const;
  VectorFuseAssetConfig(const LayerConfig &layerConfig);
#/hquote

#cppquote
  bool VectorFuseAssetConfig::HasJS(void) const {
    for (std::vector<VectorFuseAssetItem>::const_iterator item
           = items.begin(); item != items.end(); ++item) {
      if (item->HasJS())
        return true;
    }
    return false;
  }

  // Create a VectorFuseAssetConfig with the necessary pieces from LayerConfig
  VectorFuseAssetConfig::VectorFuseAssetConfig(const LayerConfig &layerConfig)
      : contextScript(layerConfig.layerContextScript),
        config_version(curr_config_version)
  {
    for (std::vector<DisplayRuleConfig>::const_iterator display
           = layerConfig.displayRules.begin();
         display != layerConfig.displayRules.end(); ++display) {
      items.push_back(
          VectorFuseAssetItem(FuseFeatureConfig(display->feature),
                              FuseSiteConfig(display->site)));
    }
  }
#/cppquote
};
