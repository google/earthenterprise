// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <vector>
#include <autoingest/.idl/storage/LayerConfig.h>
#include <autoingest/.idl/storage/VectorProjectConfig.h>
#requiresgetheapusage

#cppquote
#include <autoingest/.idl/storage/LayerConfig_impl.h>
#include <autoingest/.idl/storage/VectorProjectConfig_impl.h>
#/cppquote

class VectorDBRootConfig {
  deprecated VectorProjectConfig::ServerType serverType = VectorProjectConfig::Standard;
  std::vector<LayerConfig> layers = std::vector<LayerConfig>();

  // provider ids for layers
  // the asset refs in the layers aren't bound to versions (nor do we want
  // them to be) so we cannot use those refs to load the vector resource to
  // get the providerids
  std::vector<uint32> providers = std::vector<uint32>();

  deprecated xmlattr int config_version_ = 0;


  // To force rebuilds, increment this version.
  // When incrementing this version, you should also increment the
  // one in VectorProject and Database so this one gets the chance to get
  // checked
#version 1

#pragma GenerateIsUpToDate
};


// written by VectorDBRoot plugin, read by gedbrootgen
class DBRootGenConfig {
#pragma LoadAndSave
#pragma AfterLoad

  deprecated VectorProjectConfig::ServerType serverType = VectorProjectConfig::Standard;
  std::vector<LayerConfig> layers = std::vector<LayerConfig>();
  deprecated std::vector<std::string> layerProviders = std::vector<std::string>();
  std::vector<std::string> layerLODFiles = std::vector<std::string>();
  std::vector<uint32> layerProviderIds = std::vector<uint32>();

#hquote
  DBRootGenConfig(const VectorDBRootConfig &o,
                  const std::vector<std::string> &LODFiles) :
      layers(o.layers),
      layerLODFiles(LODFiles),
      layerProviderIds(o.providers)
  { }
                                          
  void AfterLoad(const DBRootGenConfig::DeprecatedMembers &deps);
#/hquote

#cppquote
#include <autoingest/.idl/gstProvider.h>

void DBRootGenConfig::AfterLoad(const DBRootGenConfig::DeprecatedMembers &deps)
{
  if ((layerProviderIds.size() == 0) &&
      (deps.layerProviders.size() == layers.size())) {
    gstProviderSet providers;
    if (!providers.Load()) {
      throw khException(
          "Unable to load providers to upgrade DBRootGenConfig");
    }
    layerProviderIds.resize(layers.size());
    for (uint i = 0; i < layers.size(); ++i) {
      layerProviderIds[i] = providers.GetIdFromKey(deps.layerProviders[i]);
    }
  }
}
#/cppquote


};
