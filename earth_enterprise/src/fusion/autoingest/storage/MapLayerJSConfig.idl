// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <autoingest/.idl/storage/LayerLegend.h>
#requiresgetheapusage

#cppquote
#include <autoingest/.idl/storage/LayerLegend_impl.h>
#/cppquote

class MapLayerJSConfig {
  class Layer {
    enum Type { Imagery, Vector, VectorRaster, UndefinedType = 99 };
    // Note: After GEE-5.0.2, the projection_ property has been added.
    // We do not update the version number for MapLayerJSConfig
    // since, to propagate it, we also need to update config versions in raster
    // projects and database tools. It would force rebuild for imagery and
    // database assets. So, the Undefined value has been added as the default
    // for this property. Analysing property value, we may differentiate old
    // versus new version of the MaplLayerJSConfig config.
    enum Projection { FlatProjection, MercatorProjection, UndefinedProjection = 99 };

    Type        type_ = MapLayerJSConfig::Layer::UndefinedType;
    Projection  projection_ = MapLayerJSConfig::Layer::UndefinedProjection;
    unsigned int        channel_id_ = uint(0);
    unsigned int        index_version_ = uint(0);
    LayerLegend legend_ = LayerLegend();

#pragma GenerateIsUpToDate

  #hquote
   public:
     // Converts a projection type to its string representation in maps.json.
     std::string ProjectionToString() const;
     static std::string ProjectionToString(const Projection projection);
  
  #/hquote

  };

  std::vector<Layer> layers_;


#pragma GenerateIsUpToDate
#pragma LoadAndSave

#cppquote
#include <string>

std::string MapLayerJSConfig::Layer::ProjectionToString() const {
  return MapLayerJSConfig::Layer::ProjectionToString(projection_);
}

std::string MapLayerJSConfig::Layer::ProjectionToString(
    const Projection projection) {
  std::string projection_str;
  switch (projection) {
    case FlatProjection :
      projection_str = "flat";
      break;
    case MercatorProjection :
      projection_str = "mercator";
      break;
    case UndefinedProjection :
      projection_str = "undefined";
      break;
    default:
      throw khException(
          kh::tr("Invalid projection type: %d.").arg(projection));
  }
  return projection_str;
}

#/cppquote

};
