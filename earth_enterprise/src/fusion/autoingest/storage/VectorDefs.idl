// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <cstdint>
#include <qstring.h>
#include <gst/gstTypes.h>

class VectorDefs {
  enum EightSides { TopRight = 0, Top = 1, TopLeft = 2, Left = 3, BottomLeft = 4, Bottom = 5, BottomRight = 6, Right = 7};
  // PointZ as used for maps is really "Label only"
  enum FeatureDisplayType { PointZ = 0, LineZ = 1, PolygonZ = 2, IconZ = 3};
  enum PointMarker { Circle = 0, Oval = 1, Square = 2, Rectangle = 3, EquilateralTriangle = 4, Triangle = 5, Icon = 6 };
  enum PolygonDrawMode { FillAndOutline = 0, OutlineOnly = 1, FillOnly = 2 };
  enum SiteDisplayPosition { AreaCenter = 0, LineCenter = 1 };
  enum SiteReduceMethod { ReduceSiteNone, ReduceSiteSuppressDuplicates };
  enum FeatureReduceMethod { ReduceFeatureNone, ReduceFeaturePolylines, ReduceFeatureRoads, ReduceFeaturePolygons };

#hquote
  static FeatureDisplayType SuggestedFeatureType(gstPrimType gstPrimType_);
  static QString PrettyFeatureDisplayType(FeatureDisplayType type);
#/hquote

#cppquote
  VectorDefs::FeatureDisplayType
  VectorDefs::SuggestedFeatureType(gstPrimType gstPrimType_)
  {
    switch (gstPrimType_) {
      case gstPoint:
      case gstPoint25D:
        return PointZ;
      case gstPolyLine:
      case gstPolyLine25D:
      case gstStreet:
      case gstStreet25D:
        return LineZ;
      case gstPolygon:
      case gstPolygon25D:
      case gstPolygon3D:
      case gstMultiPolygon:
      case gstMultiPolygon25D:
      case gstMultiPolygon3D:
        return PolygonZ;
      case gstUnknown:
        // for legacy reasons - we try to draw unknown types as lines
        return LineZ;
    }

    // unreached bu silences compiler warnings
    return LineZ;
  }


  QString VectorDefs::PrettyFeatureDisplayType(FeatureDisplayType type) {
    switch (type) {
      case VectorDefs::PointZ:
        return "Points";
      case VectorDefs::LineZ:
        return "Lines";
      case VectorDefs::PolygonZ:
        return "Polygons";
      default:
        return "Unknown";
    }
  }
#/cppquote

};
