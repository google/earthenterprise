// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <cstdint>
#include <string>
#include <khMetaData.h>
#include <autoingest/.idl/storage/MaskgenConfig.h>
#include <autoingest/.idl/storage/MosaicConfig.h>
#include <autoingest/.idl/storage/KRPConfig.h>
#requiresgetheapusage

#cppquote
#include <autoingest/.idl/storage/MaskgenConfig_impl.h>
#include <autoingest/.idl/storage/MosaicConfig_impl.h>
#include <autoingest/.idl/storage/KRPConfig_impl.h>
#include <autoingest/.idl/storage/RasterProductConfig.h>
#/cppquote

#hquote
class RasterProductConfig;
#/hquote


// ****************************************************************************
// ***  CombinedRP - Used for Imagery & Terrain
// ****************************************************************************
class CombinedRPConfig {
  enum MaskMode { NoMask, HaveMask, AutoMask };

  std::uint32_t        fuid_resource_ = std::uint32_t(0);
  MaskMode          mask_mode_ = CombinedRPConfig::AutoMask;
  bool      source_is_product_ = false;
  bool              need_khvr_ = false;
  IgnoreIf(!need_khvr_) MosaicConfig khvr_config_ = MosaicConfig();
  IgnoreIf(source_is_product_) KRPConfig krp_config_ = KRPConfig();
  IgnoreIf(mask_mode_!=CombinedRPConfig::AutoMask) MaskgenConfig maskgen_config_ = MaskgenConfig();

#pragma GenerateIsUpToDate

#hquote
  CombinedRPConfig(std::uint32_t num_sources, const RasterProductConfig &rpconfig);
#/hquote

#cppquote
CombinedRPConfig::CombinedRPConfig(std::uint32_t num_sources,
                                   const RasterProductConfig &rpc) {
  fuid_resource_ = rpc.fuid_resource_;
  mask_mode_ = rpc.nomask ? NoMask : (rpc.havemask ? HaveMask : AutoMask);
  source_is_product_ = rpc.sourceIsProduct;
  need_khvr_ = (num_sources > 1) || rpc.lutfile.size();
  khvr_config_ = MosaicConfig(rpc.fill,
                              rpc.lutfile,
                              rpc.mosaicFillTolerance,
                              rpc.srs);
  krp_config_ = KRPConfig(rpc.scale,
                          rpc.clampNonnegative,
                          rpc.srs,
                          rpc.useMercatorProjection,
                          rpc.north_boundary,
                          rpc.south_boundary,
                          rpc.east_boundary,
                          rpc.west_boundary);
  maskgen_config_ = rpc.maskgenConfig;
}
#/cppquote


};

