// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <cstdint>
#include <string>
#include <vector>
#include <khFileUtils.h>
#include <khException.h>
#requiresgetheapusage


class SourceConfig {
  class FileInfo {
    // NOTE: if uri has "file://" prefix, the size and mtime should also
    // be filled in by doing a stat64. If the URI has a different prefix
    // which doesn't support getting the modification time (like the
    // OGR stuff), you should just set mtime to the return value from a
    // call to time(0)

    // NOTE: but don't build these by hand anyway. Use AddFile & AddURI
    std::string uri;
    std::uint64_t      size;
    time_t      mtime;
#pragma GenerateIsUpToDate
  };
  std::vector<FileInfo> sources;

#pragma GenerateIsUpToDate

#hquote
  enum AddResult {FileOK, CantStat, NonVolume};
  AddResult AddFile(const std::string &fname);
  void AddURI(const std::string &uri);
  void clear(void) { sources.clear(); }

  // can throw!
  template <class Iter>
  void AddFilesAndOrURIs(Iter begin, Iter end) {
    for (Iter i = begin; i != end; ++i) {
      std::string s = *i;
      if (khIsURI(s)) {
        AddURI(s);
      } else {
        switch (AddFile(s)) {
          case FileOK: break;
          case NonVolume:
            throw khException
              (s + kh::tr(" doesn't reside on a known volume.").toStdString());
          case CantStat:
            throw khErrnoException(std::string(std::string(kh::tr("Unable to get file information for ")
                                               .toUtf8().constData())+s).c_str());
            break;
          default: break;
        }
      }
    }
  }
#/hquote

#cppquote

#include <khFileUtils.h>
#include <khException.h>
#include <khVolumeManager.h>
  SourceConfig::AddResult
  SourceConfig::AddFile(const std::string &file)
  {
    std::string fname = khAbspath(file);
    FileInfo fi;
    if (khGetFileInfo(fname, fi.size, fi.mtime)) {
      fi.uri = theVolumeManager.DeduceURIFromPath(fname).StrURI();
      if (fi.uri.empty()) {
        return NonVolume;
      }
      sources.push_back(fi);
      return FileOK;
    } else {
      return CantStat;
    }
  }

#include <time.h>
  void
  SourceConfig::AddURI(const std::string &uri)
  {
    FileInfo fi;
    fi.uri = uri;
    fi.size = 0;
    fi.mtime = time(0);
    sources.push_back(fi);
  }

#/cppquote


};
