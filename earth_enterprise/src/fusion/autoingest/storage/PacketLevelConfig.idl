// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//

#include <string>
#include <vector>

#include "common/khTypes.h"
#include "common/khTileAddr.h"
#include "common/SharedString.h"

class PacketLevelConfig {
#pragma DontEmitDefaults
#pragma LoadAndSave

  class Inset {
#pragma DontEmitDefaults

    // Store output filenames instead of ref to reduce ref->outfile lookup
    // load. Will be empty for all merges beyond the first one.
    std::string dataRP = std::string();
    std::string alphaRP = std::string();

    // Only filled/used when doing minify
    // In Asset/Versions this is a ref to another PacketLevelVersion
    // In khpacklevgen, this is the path to the cache.pack/ dir
    SharedString packetLevel = SharedString();

    // Only filled/used when doing minify
    // In Asset/Versions this is a ref to another PacketLevelVersion
    // In khpacklevgen, this is the path to the cache_alpha.pack/ dir
    SharedString packetAlphaLevel = SharedString();

#pragma GenerateIsUpToDate
  };

  class Attribution {
    std::string dataRP;
    std::string acquisitionDate;
    uint32      fuid_resource_;
  };

  std::vector<Inset> insets;
  khLevelCoverage    coverage;
  bool               minify; // true -> minify, false -> blend

  // If I don't want cacheraster I don't care what the previous value
  // of cacheRaster was. I'm OK with the last one caching and me not.
  IsUpToDateIgnoreIf(!cacheRaster) bool cacheRaster = false;

  bool               skipTransparent = false;

  // used only when type==Terrain
  bool               decimate    = true;
  uint               sampleSize  = uint(TmeshQuadnodeResolution);

  // used during merges of project PackgetLevel's (not supersample) to
  // indicate products to check for opaque tiles (instead of merging) this
  // is usually only useful for bluemarble & earthsat, but it is
  // SIGNIFICANT for them.
  std::string mergeTopDataRP = std::string();
  std::string mergeTopAlphaRP = std::string();

  // We can ignore attributions befause all this information is already encoded
  // (albeit in a different form) in the insets list above. Unfortunately we
  // cannot extract this information from the inset list, so we must include
  // it here.
  IsUpToDateIgnore std::vector<Attribution> attributions = std::vector<PacketLevelConfig::Attribution>();

  // add(or not) separate alpha_image to imagery-packet.
  deprecated bool separate_alpha_ = true;

  // Note: Basic rule for #version: "If the low level tool ever
  // changes to produce different output from the same config record, then
  // the version of its config needs to be increased as well as the versions
  // of all the containing configs all the way up the plugin hierarchy."

  // To force rebuilds, increment this version.
  // When incrementing this version, you should also increment the
  // one in PacketGen so this one gets the chance to get checked.
// #version 1
  // 1 -> gepackgen changed to emit protobuf imagery instead of ETA imagery
  // for Earth's DB and imagery with alpha in 4-channel PNG for Map's DB
  // (targeted for 5.0).
  // version commented -> Note: version number reverted back
  // to switch off force rebuild for imagery project (targeted to 5.0.0).

#pragma GenerateIsUpToDate
};


// ****************************************************************************
// ***  Holds RP and resource id for inset 
// ***  These fields will be used to add the resource ids based on bounding box
// ***  tests 
// ****************************************************************************
class RasterPackUpgradeConfig {
#pragma LoadAndSave
  std::vector<PacketLevelConfig::Attribution> attributions;

#hquote
  RasterPackUpgradeConfig(const PacketLevelConfig &packlev);
#/hquote  

#cppquote
RasterPackUpgradeConfig::RasterPackUpgradeConfig(
    const PacketLevelConfig &packlev) {
  attributions = packlev.attributions;
}
#/cppquote  

};
