// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <qstring.h>
#include <khConstants.h>
#requiresgetheapusage

class IconReference {
  enum Type { Internal = 0, External = 1 };

  Type type    = IconReference::Internal;
  QString href = QString(kDefaultIconName.c_str());    // dot

#hquote
  bool operator<(const IconReference &o) const;
  std::string SourcePath(void) const;
  static std::string CustomIconPath(void);
  // Trys to find icon first in internal list and then in external list. Exits
  // with a fatal error message if the icon cannot be found. Otherwise returns
  // the type (Internal/External).
  static void CheckIconExistence(const std::string& icon_name,
                                 IconReference::Type* type);

  std::string LegendHref(void) const { return std::string(href) + "_l.png"; }
  std::string NormalHref(void) const { return std::string(href) + "_n.png"; }
  std::string HighlightHref(void) const { return std::string(href) + "_h.png"; }
  std::string NormalHighlightHref(void) const {
    return std::string(href) + "_nh.png";
  }
#/hquote

#cppquote
#include <autoingest/.idl/storage/AssetDefs.h>
#include <geInstallPaths.h>
#include <autoingest/geAssetRoot.h>
#include <khFileUtils.h>

  bool IconReference::operator<(const IconReference &o) const {
    if (type == o.type) {
      return href < o.href;
    }
    return type < o.type;
  }

  std::string IconReference::CustomIconPath(void) {
    static const std::string customIconPath =
      khComposePath(geAssetRoot::Dirname(AssetDefs::AssetRoot(),
                                         geAssetRoot::UserDataDir),
                    "icons");
    return customIconPath;
  }

  std::string IconReference::SourcePath(void) const {
    std::string filename { href.toUtf8().constData() };
    filename += ".png";
    return khComposePath(((type == IconReference::Internal)
                          ? kGESiteIconsPath
                          : CustomIconPath()),
                         filename.c_str());
  }

  void IconReference::CheckIconExistence(const std::string& icon_name,
                               IconReference::Type* type) {
    IconReference internal(IconReference::Internal, icon_name.c_str());
    std::string internal_path = internal.SourcePath();
    if (khIsFileReadable(internal_path)) {
      *type = IconReference::Internal;
      return;
    }
    IconReference external(IconReference::External, icon_name.c_str());
    std::string external_path = external.SourcePath();
    if (khIsFileReadable(external_path)) {
      *type = IconReference::External;
      return;
    }
    notify(NFY_FATAL, "Cannot find the icon \"%s\".\n"
            "It should be a readable file either as \"%s\" or as \"%s\"",
            icon_name.c_str(), internal_path.c_str(),
            external_path.c_str());
  }

#/cppquote
};
