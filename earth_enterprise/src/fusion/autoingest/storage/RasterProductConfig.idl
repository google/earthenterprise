// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <cstdint>
#include <string>
#include <khMetaData.h>
#include <autoingest/.idl/storage/AssetDefs.h>
#include <autoingest/.idl/storage/MaskgenConfig.h>
#include <autoingest/.idl/storage/SourceConfig.h>
#requiresgetheapusage

#cppquote
#include <autoingest/.idl/storage/AssetDefs_impl.h>
#include <autoingest/.idl/storage/MaskgenConfig_impl.h>
#include <autoingest/.idl/storage/SourceConfig_impl.h>
#/cppquote

// ****************************************************************************
// ***  RasterProduct - Used for Imagery & Terrain
// ****************************************************************************
class RasterProductConfig {
#pragma AfterLoad
#pragma DontEmitDefaults

  // for mosaic
  std::string fill;
  // for reproject
  std::string srs;
  // for KRP
  double scale = double(1.0);
  // New terrain resources default to allowing negative elevations.
  // Existing/upgraded resources that are unspecified default to clamp elev>=0
  // for backward compatibility.
  bool clampNonnegative = new:false, load:true;

  // for maskgen
  deprecated unsigned int feather = uint(100);  // no longer used
  deprecated MaskgenConfig::Mode maskmode = MaskgenConfig::Mask; // no longer used
  // my own
  bool nomask = false;
  bool havemask = false;
  bool sourceIsProduct = false;
  // for KRP
  deprecated bool coerce = false; // no longer used
  // for VirtualRaster
  std::string lutfile = std::string();
  // for maskgen
  MaskgenConfig maskgenConfig = MaskgenConfig();
  // for mosaic
  unsigned int mosaicFillTolerance = uint(0);

  std::uint32_t      fuid_resource_ = std::uint32_t(0);
  std::uint32_t      provider_id_   = std::uint32_t(0);

  bool useMercatorProjection = new:false, load:false;
  double north_boundary = new:90.0, load:90.0;
  double south_boundary = new:-90.0, load:-90.0;
  double east_boundary = new:180.0, load:180.0;
  double west_boundary = new:-180.0, load:-180.0;


#pragma GenerateIsUpToDate

#hquote
  void AfterLoad(const RasterProductConfig::DeprecatedMembers &depmembers) {
    if (maskgenConfig.mode == MaskgenConfig::Unset) {
      // we didn't have a maskgenConfig entry, this must be an old
      // config object. Fill the new maskgenConfig with values to
      // match the old defaults.
      maskgenConfig.SetFromOldValues(depmembers.maskmode, depmembers.feather);
    }

    // normalize the mosaic fill
    std::string::size_type found = fill.find(", ");
    while (found != std::string::npos) {
      fill.replace(found, 2, ",");
      found = fill.find(", ");
    }
  }
  void SetTypeDefaults(AssetDefs::Type type) {
    maskgenConfig.SetTypeDefaults(type);
  }

  // Resets all Ids as it is in a config for just created asset.
  void ResetIds(void) {
    fuid_resource_ = 0;
  }
#/hquote
};

class RasterProductImportRequest {
  AssetDefs::Type type;
  std::string assetname;
  RasterProductConfig config;
  khMetaData meta;
  SourceConfig sources;

#hquote
  RasterProductImportRequest(AssetDefs::Type t) : type(t) {
    config.SetTypeDefaults(type);
  }
#/hquote

#pragma StrLoadAndSave
};
