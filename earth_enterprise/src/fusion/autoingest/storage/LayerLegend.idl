// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <qstring.h>
#include <map>
#include <Defaultable.h>
#include <autoingest/.idl/storage/IconReference.h>
#requiresgetheapusage

#cppquote
#include <autoingest/.idl/storage/IconReference_impl.h>
#/cppquote


class LegendLocale {
  Defaultable<QString>       name      = Defaultable<QString>(true, "");
  Defaultable<bool>          isChecked = Defaultable<bool>();
  Defaultable<QString>       desc      = Defaultable<QString>(true, "");
  Defaultable<QString>       lookAt    = Defaultable<QString>(true, "");
  Defaultable<IconReference> icon      = Defaultable<IconReference>();

  // NOTE: if you add new fields you must update the Functions below

#hquote
 public:
  LegendLocale(const QString &n, bool checked) :
      name(n),
      isChecked(checked),
      desc(""),
      lookAt(""),
      icon(IconReference())
  { }
  void BindDefaults(const LegendLocale &defaults);
  void ClearDefaultFlags(void);
#/hquote

#cppquote
  void LegendLocale::BindDefaults(const LegendLocale &defaults) {
    name.BindDefaults(defaults.name);
    isChecked.BindDefaults(defaults.isChecked);
    desc.BindDefaults(defaults.desc);
    lookAt.BindDefaults(defaults.lookAt);
    icon.BindDefaults(defaults.icon);
  }
  void LegendLocale::ClearDefaultFlags(void) {
    name.ClearUseDefault();
    isChecked.ClearUseDefault();
    desc.ClearUseDefault();
    lookAt.ClearUseDefault();
    icon.ClearUseDefault();
  }
#/cppquote

#pragma GenerateIsUpToDate
};

class LayerLegend {
  typedef std::map<QString, LegendLocale> LocaleMap;

  LegendLocale defaultLocale;
  std::map<QString, LegendLocale> locales = LayerLegend::LocaleMap();

#pragma NoVoidConstructor
#pragma AfterLoad
#pragma GenerateIsUpToDate
  
#hquote
  LayerLegend(void) {
    defaultLocale.ClearDefaultFlags();
  }
  LayerLegend(const QString &defaultLocaleName, bool defaultLocaleIsChecked)
  {
    defaultLocale.ClearDefaultFlags();
    defaultLocale.name = defaultLocaleName;
    defaultLocale.isChecked = defaultLocaleIsChecked;
  }
  void AfterLoad(void) {
    defaultLocale.ClearDefaultFlags();
  }
  LegendLocale GetLegendLocale(const QString &locale) const;
#/hquote

#cppquote
  LegendLocale LayerLegend::GetLegendLocale(const QString &locale) const {
    std::map<QString, LegendLocale>::const_iterator it = locales.find(locale);
    // return the default locale config this specific is not set
    if (it == locales.end()) return defaultLocale;
    LegendLocale newLocale = it->second;
    // set the individual fields from the default locale if required
    newLocale.BindDefaults(defaultLocale);

    return newLocale;
  }
#/cppquote

};
