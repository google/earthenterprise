// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      MapGEIndex
#config Base      Leaf
#config Config    MapGEIndexConfig
#config Subtype   MapGEIndex
#config FixedType Map


// ===== MapGEIndexAsset.h =====
#include <autoingest/.idl/storage/MapGEIndexConfig.h>

// ===== MapGEIndexAsset.cpp =====


// ===== MapGEIndexAssetD.h =====
class MapGEIndexAssetImplD {
 public:
  void ReuseOldPacketVers(MapGEIndexConfig &newconfig) const;
};

class MapGEIndexAssetVersionImplD {
 protected:
  virtual bool OfflineInputsBreakMe(void) const { return true; }
};


// ===== MapGEIndexAssetD.cpp =====
#include <khException.h>
#include <khGuard.h>
#include <map>
#include <geindexgen/.idl/UnifiedConfig.h>

void
MapGEIndexAssetImplD::ReuseOldPacketVers(
    MapGEIndexConfig &newconfig) const
{
  // make a map of my newconfig layervers so the hit check can be faster
  std::map<unsigned int, MapGEIndexConfig::Layer*> layermap;
  for (unsigned int i = 0; i < newconfig.layers_.size(); ++i) {
    layermap.insert(std::make_pair
                    (newconfig.layers_[i].channel_id_,
                     &newconfig.layers_[i]));
  }

  // now walk back the previous AssetVersions and find the index versions
  // that we can reuse
  for (unsigned int v = 0; v < versions.size(); ++v) {
    MapGEIndexAssetVersion prev(versions[v]);
    if (prev->config.index_version_ <= newconfig.index_version_) {
      for (unsigned int i = 0; i < prev->config.layers_.size(); ++i) {
        std::map<unsigned int, MapGEIndexConfig::Layer*>::iterator found
          = layermap.find(prev->config.layers_[i].channel_id_);
        if (found != layermap.end()) {
          // We found a layer with the same id
          if (found->second->levels_ == prev->config.layers_[i].levels_) {
            // The level's match too. We can reuse the index_version_.
            found->second->index_version_ =
              prev->config.layers_[i].index_version_;
          }
        }
      }
      if (prev->config.index_version_ < newconfig.index_version_) {
        // this is a publish boundary, we're done
        break;
      }
    } else {
      // we've walked past a publish boundary. Stop checking for
      // versions to use.
      break;
    }
  }
}


void
MapGEIndexAssetVersionImplD::DoSubmitTask(void)
{
  if (config.layers_.empty()) {
    throw khException(kh::tr("No map layer packets for indexing"));
  }

  // ************************************************
  // Generate the configfile
  // ************************************************
  geindexgen::UnifiedConfig geindex_config;

  for (unsigned int i = 0; i < config.layers_.size(); ++i) {
    for (unsigned int j = 0; j < config.layers_[i].levels_.size(); ++j) {
      AssetVersion assetver(config.layers_[i].levels_[j].verref_);
      std::string packetdir = assetver->GetOutputFilename(0);

      geindex_config.indexes_.push_back(
          geindexgen::UnifiedConfig::Entry(
              ToString(config.layers_[i].type_),
              packetdir,
              config.layers_[i].index_version_,
              config.layers_[i].channel_id_,
              config.layers_[i].date_string_));
    }
  }

  std::string configfile = WorkingFilename("configfile"); // fully bound name
  if (!geindex_config.Save(configfile)) {
    throw khException(kh::tr("Unable to save %1").arg(configfile));
  }


  // ******************************************************
  // Create and submit the task that will invoke the script
  // ******************************************************
  TaskDef task(*this);
  std::vector<std::string> inputs;
  GetInputFilenames(inputs);
  task.AddInputs(inputs);

  // TODO: - implement size estimate
  task.AddOutput(WorkingFileRef(config.db_name_ + "-v" +
                                ToString(config.index_version_) + ".geindex"),
                 0); // size estimate

  task << "geunifiedindexgen"
       << "--config"  << configfile
       << "--output" << "$OUTPUT";
  theAssetManager.SubmitTask(GetRef(), task);
}
