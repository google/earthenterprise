// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      VectorFuse
#config Base      Leaf
#config Config    VectorFuseAssetConfig
#config Subtype   VectorFuse
#config FixedType Vector


// ===== VectorFuseAsset.h =====
#include <autoingest/.idl/storage/VectorFuseAssetConfig.h>

// ===== VectorFuseAsset.cpp =====

// ===== VectorFuseAssetD.h =====
class VectorFuseAssetVersionImplD {
 public:
  bool AttemptConvertFromOldLastGood(void);
  void MakeConvertTask(const AssetVersion &old);
};

// ===== VectorFuseAssetD.cpp =====
#include <khFileUtils.h>

void
VectorFuseAssetVersionImplD::DoSubmitTask(void)
{
  if (AttemptConvertFromOldLastGood()) {
    return;
  }


  TaskDef task(*this);

  // *******************************************************************
  // Determine our bound input filenames
  //    The first input is the vector product file. The second input is
  // our VectorQuery which can have multiple outputs (one for each
  // filter)
  // *******************************************************************
  std::string productfile = AssetVersion(inputs[0])->GetOutputFilename(0);
  std::vector<std::string> selectfiles;
  AssetVersion query(inputs[1]);
  query->GetOutputFilenames(selectfiles);

  // add the product file to the task's inputs
  // the selectfiles will be added in the loop below
  task.AddInput(productfile);

  // ******************************************************
  // write out the fuseconfig.xml file used by gevectorfuse
  // ******************************************************
  FuseConfig fuseConfig;
  for (unsigned int i = 0; i < selectfiles.size(); ++i) {
    // Skip any selectfile that doesn't exist. We have to do this since a
    // query step may result in zero selected elements. When this is the
    // case, the query step does NOT produce an output file. But if we pass
    // a filename of a non-existent file to gevectorfuse, it is
    // unhappy. Maybe later we can get gevectorquery & gevectorfuse to be
    // consistent in their handling of the "no records selected" case
    if (khExists(selectfiles[i])) {
      fuseConfig.items.push_back(FuseItem(config.items[i].feature,
                                          config.items[i].site,
                                          selectfiles[i]));
      task.AddInput(selectfiles[i]);
    }
  }
  fuseConfig.contextScript = config.contextScript;
  std::string fuseConfigFilename = WorkingFilename("fuseconfig.xml");
  fuseConfig.Save(fuseConfigFilename);


  // generate packet filenames based on my name
  // TODO: - implement size estimates
  std::string packet_path = WorkingFileRef(khReplaceExtension
                                (khBasename(GetAssetRef()), ".kvpacket"));
  task.AddOutput(packet_path, 0); // size estimate

  // submit the task
  task << "gevectorfuse"
       << "--output"  << "$OUTPUT"
       << "--product" << "$INPUTS[0]"
       << "--config"  << fuseConfigFilename;

  theAssetManager.SubmitTask(GetRef(), task);
}


bool
VectorFuseAssetVersionImplD::AttemptConvertFromOldLastGood(void)
{
  if (version > 1) {
    // We have previous versions. It was their job, not mine, to convert
    // from the old location/format
    return false;
  }

  // get the old name of the this asset
  std::string oldassetref = GetAssetRef();
  {
    static const std::string oldsuffix = "pack.kva";
    static const std::string newsuffix = "packet.kva";
    if (!EndsWith(oldassetref, newsuffix)) {
      notify(NFY_DEBUG, "New assetref (%s) doesn't end in '%s'",
             oldassetref.c_str(), newsuffix.c_str());
      return false;
    }
    oldassetref.resize(oldassetref.size()-newsuffix.size());
    oldassetref += oldsuffix;
  }


  // see if the old name is even an asset dir
  if (!khDirExists(AssetDefs::AssetPathToFilename(oldassetref))) {
    notify(NFY_DEBUG, "Old assetref (%s) not a dir", oldassetref.c_str());
    return false;
  }

  // load the old asset
  Asset oldasset(oldassetref);
  if (!oldasset) {
    notify(NFY_DEBUG, "Can't load assetref (%s)", oldassetref.c_str());
    return false;
  }

  // make a modified copy of my config that we can compare against the old
  // configs
  VectorFuseAssetConfig checkconfig = config;
  checkconfig.config_version = 0;

  // Get the last good version of the old asset
  VectorFuseAssetVersion lastgood(oldasset->GetLastGoodVersionRef());
  if (!lastgood) {
    notify(NFY_DEBUG, "Asset (%s) doesn't have a last good version",
           oldassetref.c_str());
    return false;
  }

  if (lastgood->config != checkconfig) {
    notify(NFY_DEBUG, "AssetVer (%s) config doesn't match",
           lastgood->GetRef().toString().c_str());
    return false;
  }

  // All requirements are met, convert this old version to a new version
  MakeConvertTask(lastgood);

  // tell caller that we've already added the task so it doesn't need to
  return true;
}


void
VectorFuseAssetVersionImplD::MakeConvertTask(const AssetVersion &oldver) {

  TaskDef task(*this);

  // write out an "upgradedfrom" file to tell that I am upgrading from an old
  // version. This information will be used by merge PacketLevels to determine
  // if they can upgrade instead of doing their own work.
  (void)khWriteStringToFile(WorkingFilename("upgradedfrom"),
                            oldver->GetRef());

  // get my input filenames so I can pass them to the TaskDef
  std::string input_filename = oldver->GetOutputFilename(0);
  task.AddInput(input_filename);

  // generate output filename based on my name
  std::string output_filename = WorkingFileRef(
      khReplaceExtension(khBasename(GetAssetRef()), ".kvpacket"));
  // TODO: - implement size estimates
  task.AddOutput(output_filename, 0); // size estimate


  task << "gevectorpackupgrade"
       << input_filename
       << "$OUTPUT";
  theAssetManager.SubmitTask(GetRef(), task);
}
