// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Note: need to keep this synced with MapDatabase.src

#config Name       MercatorMapDatabase
#config Base       Composite
#config Config     MapDatabaseConfig
#config Subtype    MercatorMapDatabase
#config FixedType  Database
#config ModifyResistantConfigMembers indexVersion

// ===== MercatorMapDatabaseAsset.h =====
#include <autoingest/.idl/storage/MapDatabaseConfig.h>

class MercatorMapDatabaseAssetVersionImpl {
 public:
  AssetVersion GetMapdbChild() const;
};

// ===== MercatorMapDatabaseAsset.cpp =====

namespace {

uint kUnifiedIndexChildPos    = 0;
uint kMapDBChildPos            = 1;

}

AssetVersion
MercatorMapDatabaseAssetVersionImpl::GetMapdbChild(void) const
{
  // As these variables are not used the following lines are required to
  // work-around compiler warnings. TODO: check that the following
  // variables are used at appropriate places.
  (void) kUnifiedIndexChildPos;

  AssetVersion asset_version;
  if (children.size() > kMapDBChildPos) {
    AssetVersion tmp = children[kMapDBChildPos];
    if (tmp->subtype == "MapDB") {
      asset_version = tmp;
    }
  }
  return asset_version;
}

// ===== MercatorMapDatabaseAssetD.h =====
#include <limits>

class MercatorMapDatabaseAssetImplD {
 protected:
  void PostUpdate(void) { IncrementIndexVersion(); }
  static void PopulateInputs(const MapDatabaseConfig &config,
                             std::vector<SharedString> &inputs);

 public:
  static void HandleEditRequest(const MapDatabaseEditRequest &);
  static void HandleNewRequest(const MapDatabaseEditRequest &);
  static void HandleModifyRequest(const MapDatabaseEditRequest &);

  void IncrementIndexVersion(void) {
    config.indexVersion = (config.indexVersion + 1) %
                          std::numeric_limits<uint32>::max();
    if (config.indexVersion == 0) {
      config.indexVersion = 1;
    }
  }
};

class MercatorMapDatabaseAssetVersionImplD {
 protected:

  // This will make my children after my inputs have succeeded
  virtual void DelayedBuildChildren(void);

 public:

  virtual bool MustForceUpdate(void) const;
};


// ===== MercatorMapDatabaseAssetD.cpp =====
#include <autoingest/sysman/plugins/RasterProjectAssetD.h>
#include <autoingest/sysman/plugins/RasterProductAssetD.h>

#include <autoingest/sysman/plugins/MercatorRasterProjectAssetD.h>
#include <autoingest/sysman/plugins/MercatorRasterProductAssetD.h>
#include <autoingest/sysman/plugins/MapProjectAssetD.h>
#include <autoingest/sysman/plugins/ProjectedMapProjectAssetD.h>
#include <autoingest/sysman/plugins/UnifiedIndexAssetD.h>
#include <autoingest/sysman/plugins/MapDBAssetD.h>
#include <geindex/Entries.h>
#include <khConstants.h>
#include "fusion/fusionversion.h"


void MercatorMapDatabaseAssetImplD::PopulateInputs(
    const MapDatabaseConfig &config, std::vector<SharedString> &inputs)
{
  if (!config.imageryProject.empty()) {
    // Depends on imagery project sub-type detected based on the path extension,
    // select corresponding factory to validate input.
    bool is_mercator_imagery_project =
        khHasExtension(config.imageryProject, kMercatorImageryProjectSuffix);

    if (is_mercator_imagery_project) {
      MercatorRasterProjectFactory::ValidateRefForInput(config.imageryProject);
    } else {
      RasterProjectFactory::ValidateRefForInput(config.imageryProject,
                                                AssetDefs::Imagery);
    }
    inputs.push_back(config.imageryProject);
  }

  if (!config.mapProject.empty()) {
    MapProjectFactory::ValidateRefForInput(config.mapProject);

    // make a projected map project for my input
    ProjectedMapProjectConfig proj_config(AssetDefs::MercatorProjection);

    // Go through AssetVersionRef just in case mapProject is a reference to
    // a version instead of an asset
    std::string proj_asset_ref = AssetVersionRef(config.mapProject).AssetRef();
    std::string base_ref = khComposePath(proj_asset_ref, "projected");
    base_ref += "_mercator";
    std::string projected_proj_name =
      AssetDefs::NormalizeAssetName(base_ref, AssetDefs::Map,
                                    "ProjectedProject");

    MutableProjectedMapProjectAssetD proj_asset =
      ProjectedMapProjectFactory::FindMake(projected_proj_name,
                                           makevec<SharedString>(config.mapProject),
                                           khMetaData(),
                                           proj_config);
    inputs.push_back(proj_asset->GetRef());
  }
}

void
MercatorMapDatabaseAssetImplD::HandleEditRequest(const MapDatabaseEditRequest &req)
{
  // make sure the project assetRef's are valid
  std::vector<SharedString> inputs;
  PopulateInputs(req.config, inputs);

  // normalize the supplied asset name
  std::string dbname =
    AssetDefs::NormalizeAssetName(req.assetname, AssetDefs::Database,
                                  kMercatorMapDatabaseSubtype);


  (void) MercatorMapDatabaseFactory::FindMake(dbname,
                                      inputs,
                                      req.meta,
                                      req.config);
}

void
MercatorMapDatabaseAssetImplD::HandleNewRequest(const MapDatabaseEditRequest &req)
{
  // make sure the project assetRef's are valid
  std::vector<SharedString> inputs;
  PopulateInputs(req.config, inputs);

  // normalize the supplied asset name
  std::string dbname =
    AssetDefs::NormalizeAssetName(req.assetname, AssetDefs::Database,
                                  kMercatorMapDatabaseSubtype);


  (void) MercatorMapDatabaseFactory::MakeNew(dbname,
                                     inputs,
                                     req.meta,
                                     req.config);
}


void
MercatorMapDatabaseAssetImplD::HandleModifyRequest(const MapDatabaseEditRequest &req)
{
  // make sure the project assetRef's are valid
  std::vector<SharedString> inputs;
  PopulateInputs(req.config, inputs);

  // normalize the supplied asset name
  std::string dbname =
    AssetDefs::NormalizeAssetName(req.assetname, AssetDefs::Database,
                                  kMercatorMapDatabaseSubtype);


  // find and modify the DB
  (void) MercatorMapDatabaseFactory::FindAndModify(dbname,
                                           inputs,
                                           req.meta,
                                           req.config);
}

bool
MercatorMapDatabaseAssetVersionImplD::MustForceUpdate(void) const
{
  // if the version has a mapdb child then we know that it was not created
  // using the older versions of fusion.
  // if we don't have any children, it's because this build's inputs failed
  // so we don't know enough to decide if we need to force a build
  if (children.size() > 0) {
    MapDBAssetVersion asset_version = GetMapdbChild();
    if (asset_version) {
      // Check the MapDB to see if we must force an update.
      // This is necessary as of 3.2 due to added JSON support.
      // We now record the fusion version with GEDB's as of 3.2, if it's
      // empty we need to force update.
      return asset_version->config.fusion_version_.empty();
    } else {
      return true;
    }
  } else {
    return false;
  }
}

// Don't do anything for UpdateChildren - we defer to DelayedBuildChildren
void
MercatorMapDatabaseAssetVersionImplD::UpdateChildren(void)
{
}

void
MercatorMapDatabaseAssetVersionImplD::DelayedBuildChildren(void)
{
  std::string assetRef = GetAssetRef();
  std::vector<std::string> children;

  // get my project inputs
  MercatorRasterProjectAssetVersionD mercatorRasterProject;
  RasterProjectAssetVersionD rasterProject;
  ProjectedMapProjectAssetVersionD mapProject;

  uint next = 0;
  bool is_mercator_imagery_project = false;

  if (!config.imageryProject.empty()) {
    // Depends on imagery project sub-type detected based on path extension,
    // create an object of either Mercator or Flat raster project.
    is_mercator_imagery_project =
        khHasExtension(config.imageryProject, kMercatorImageryProjectSuffix);

    if (is_mercator_imagery_project) {
      mercatorRasterProject = inputs[next++];
    } else {
      rasterProject = inputs[next++];
    }
  }

  if (!config.mapProject.empty()) {
    mapProject = inputs[next++];
  }


  // ------------------------
  // make unified index asset
  // ------------------------
  MutableUnifiedIndexAssetVersionD unified_index;
  {
    std::string unified_index_asset_name
      (UnifiedIndexFactory::SubAssetName(assetRef, "unifiedindex"));
    std::vector<AssetVersion> index_input_versions;
    std::vector<SharedString>  index_input_verrefs;

    UnifiedIndexConfig unified_index_config;
    if (mercatorRasterProject || rasterProject) {
      RasterGEIndexAssetVersion subindex = is_mercator_imagery_project ?
          mercatorRasterProject->GetGEIndexVersion():
          rasterProject->GetGEIndexVersion();
      index_input_versions.push_back(subindex);
      index_input_verrefs.push_back(subindex.Ref());
      unified_index_config.indexes_.push_back(
          UnifiedIndexEntry(ToString(geindex::TypedEntry::Imagery),
                            subindex.Ref(),
                            subindex->config.index_version_,
                            (is_mercator_imagery_project ?
                             mercatorRasterProject->config.fuid_channel_:
                             rasterProject->config.fuid_channel_),
                            "" /* unused date_string */));
    }
    if (mapProject) {
      AssetVersion subindex = mapProject->GetGEIndexVersion();
      index_input_versions.push_back(subindex);
      index_input_verrefs.push_back(subindex.Ref());
      unified_index_config.indexes_.push_back(
          UnifiedIndexEntry(kUnifiedType,
                            subindex.Ref(),
                            0 /* unused version */,
                            0 /* unused channel id */,
                            "" /* unused date_string */));
    }

    unified_index =
      UnifiedIndexFactory::FindMakeAndUpdate(
          unified_index_asset_name,
          index_input_verrefs,
          khMetaData(),
          unified_index_config,
          index_input_versions);
  }

  // ------------------------
  // make mapdb asset
  // ------------------------
  MutableMapDBAssetVersionD mapdb;
  {
    std::string mapdb_asset_name
      (MapDBFactory::SubAssetName(assetRef, kMapdbBase));
    std::vector<AssetVersion> mapdb_input_versions;
    std::vector<SharedString>  mapdb_input_verrefs;

    // populate inputs
    // Adding the unified index as my input and registering that offline inputs
    // break me, will ensure that nothing gets cleaned out from underneath me
    // including the projects and their dbroots
    mapdb_input_versions.push_back(unified_index);
    mapdb_input_verrefs.push_back(unified_index.Ref());

    // build config
    MapDBAssetConfig mapdb_config(unified_index.Ref(),
                                  mapProject.Ref(),
                                  (is_mercator_imagery_project ?
                                   mercatorRasterProject.Ref() :
                                   rasterProject.Ref()),
                                  config.search_tabs_,
                                  config.indexVersion,
                                  config.useGoogleImagery,
                                  true,  // This is mercator projection Map DB.
                                  GEE_VERSION);
    // update the mapdb asset
    mapdb =
      MapDBFactory::FindMakeAndUpdate(
          mapdb_asset_name,
          mapdb_input_verrefs,
          khMetaData(),
          mapdb_config,
          mapdb_input_versions);
  }


  // --------------------
  // Now add my children in the order we define above
  // --------------------
  AddChild(unified_index);
  AddChild(mapdb);
}
