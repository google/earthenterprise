// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      GEDB
#config Base      Leaf
#config Config    GEDBAssetConfig
#config Subtype   GEDB
#config FixedType Database


// ===== GEDBAsset.h =====
#include <autoingest/.idl/storage/GEDBAssetConfig.h>

// ===== GEDBAsset.cpp =====


// ===== GEDBAssetD.h =====
class GEDBAssetVersionImplD {
 protected:
  virtual bool OfflineInputsBreakMe(void) const { return true; }
};


// ===== GEDBAssetD.cpp =====
#include <khException.h>
#include <autoingest/sysman/plugins/RasterProjectAssetD.h>
#include <autoingest/sysman/plugins/VectorProjectAssetD.h>
#include <dbgen/.idl/DBConfig.h>
#include "fusion/fusionversion.h"

void
GEDBAssetVersionImplD::DoSubmitTask(void)
{

  // ************************************************
  // Generate the configfile
  // ************************************************
  GEDBGenConfig gedbgen_config;
  {
    // get the input's bound filename
    AssetVersion index(config.index_verref_);
    gedbgen_config.index_path_ = index->GetOutputFilename(0);
  }
  if (!config.vector_project_.empty()) {
    VectorProjectAssetVersionD vectorProject(config.vector_project_);
    gedbgen_config.vector_dbroot_path_ =
      vectorProject->GetDBRootVersion()->GetOutputFilename(0);
    vectorProject->GetPOIFiles(gedbgen_config.poi_file_paths_);
  }
  if (!config.imagery_project_.empty()) {
    RasterProjectAssetVersionD imageryProject(config.imagery_project_);
    gedbgen_config.imagery_dbroot_path_ =
      imageryProject->GetDBRootVersion()->GetOutputFilename(0);
    gedbgen_config.imagery_has_timemachine_ =
        imageryProject->config.is_timemachine_project_;
  }
  if (!config.terrain_project_.empty()) {
    RasterProjectAssetVersionD terrainProject(config.terrain_project_);
    gedbgen_config.terrain_dbroot_path_ =
      terrainProject->GetDBRootVersion()->GetOutputFilename(0);
  }

  gedbgen_config.database_version_ = config.database_version_;

  std::string configfile = WorkingFilename("config.xml"); // fully bound name
  if (!gedbgen_config.Save(configfile)) {
    throw khException(kh::tr("Unable to save %1").arg(configfile.c_str()));
  }

  // ******************************************************
  // Create and submit the task that will invoke the script
  // ******************************************************
  TaskDef task(*this);
  std::vector<std::string> inputs;
  GetInputFilenames(inputs);
  task.AddInputs(inputs);

  // TODO: - implement size estimate
  task.AddOutput(WorkingFileRef(kGedbBase),
                 0); // size estimate

  task << "gedbgen"
       << "--config" << configfile
       << "--output" << "$OUTPUT";
  theAssetManager.SubmitTask(GetRef(), task);
}
