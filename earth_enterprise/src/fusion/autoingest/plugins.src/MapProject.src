// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      MapProject
#config Base      Composite
#config Config    MapProjectConfig
#config Subtype   Project
#config FixedType Map


// ===== MapProjectAsset.h =====
#include <autoingest/.idl/storage/MapProjectConfig.h>


// ===== MapProjectAsset.cpp =====


// ===== MapProjectAssetD.h =====
class MapProjectAssetImplD {
 protected:
  void SyncInputRefs(void);
 public:
  static void HandleEditRequest(const MapProjectEditRequest &);
};



// ===== MapProjectAssetD.cpp =====
#include <autoingest/sysman/plugins/MapLayerAssetD.h>

void
MapProjectAssetImplD::SyncInputRefs(void)
{
  // update my inputs based on which layers have assetRefs
  inputs.clear();
  for (std::vector<MapProjectConfig::LayerItem>::const_iterator layer
         = config.layers.begin();
       layer != config.layers.end(); ++layer) {

    // skip layers marked with the 'skip' flag
    // the fusion user has turned these off and doesn't want them to be
    // processed at all
    if (layer->skipLayer) {
      continue;
    }

    inputs.push_back(layer->assetRef);
  }
}

void
MapProjectAssetImplD::HandleEditRequest(const MapProjectEditRequest &req)
{
  // make sure the assetRef's are valid
  for (std::vector<MapProjectConfig::LayerItem>::const_iterator layer
         = req.config.layers.begin();
       layer != req.config.layers.end(); ++layer) {
    if (!layer->skipLayer) {
      ValidateRefForInput<MapLayerType>(layer->assetRef);
    }
  }

  // find/make our target project
  std::string projname =
    khEnsureExtension(req.assetname,
                      AssetDefs::FileExtension(AssetDefs::Map,
                                               kProjectSubtype));
  // will be filled in later
  std::vector<SharedString> inputs;

  MutableMapProjectAssetD project =
    FindMake<MapProjectType>(projname, inputs, req.meta, req.config);

  project->SyncInputRefs();
}



void
MapProjectAssetVersionImplD::UpdateChildren(void)
{
  // no children to add
}
