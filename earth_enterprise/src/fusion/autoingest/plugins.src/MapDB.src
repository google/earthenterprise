// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      MapDB
#config Base      Leaf
#config Config    MapDBAssetConfig
#config Subtype   MapDB
#config FixedType Database


// ===== MapDBAsset.h =====
#include <autoingest/.idl/storage/MapDBAssetConfig.h>

// ===== MapDBAsset.cpp =====


// ===== MapDBAssetD.h =====
class MapDBAssetVersionImplD {
 public:
  virtual bool MustForceUpdate(void) const;
 protected:
  virtual bool OfflineInputsBreakMe(void) const { return true; }
};


// ===== MapDBAssetD.cpp =====
#include <khConstants.h>
#include <khException.h>
#include <autoingest/sysman/plugins/RasterProjectAssetD.h>
#include <autoingest/sysman/plugins/MercatorRasterProjectAssetD.h>
#include <autoingest/sysman/plugins/ProjectedMapProjectAssetD.h>
#include <dbgen/.idl/DBConfig.h>
#include "fusion/fusionversion.h"

bool MapDBAssetVersionImplD::MustForceUpdate(void) const {
  // Only pre-3.2 gedb configs were missing a fusion version.
  if (config.fusion_version_.empty()) {
    return true;  // We need to rebuild the MapDb for any pre-3.2 db.
                  // Needed for JSON file creation.
  }
  return false;
}

void
MapDBAssetVersionImplD::DoSubmitTask(void)
{

  // ************************************************
  // Generate the configfile
  // ************************************************
  MapDBGenConfig mapdbgen_config;
  mapdbgen_config.use_google_imagery_ = config.useGoogleImagery;
  mapdbgen_config.is_mercator_ = config.is_mercator_;
  mapdbgen_config.fusion_version_ = config.fusion_version_;
  {
    // get the input's bound filename
    AssetVersion index(config.index_verref_);
    mapdbgen_config.index_path_ = index->GetOutputFilename(0);
  }
  if (!config.map_project_.empty()) {
    ProjectedMapProjectAssetVersionD mapProject(config.map_project_);
    MapLayerJSAssetVersion layerJSVersion = mapProject->GetLayerJSVersion();
    if (!layerJSVersion) {
      throw khException(kh::tr("INTERNAL ERROR: No MapLayerJS found for map project"));
    }
    mapdbgen_config.map_layerdefs_path_ = layerJSVersion->GetOutputFilename(0);
    mapProject->GetPOIFiles(mapdbgen_config.poi_file_paths_);
  }
  if (!config.imagery_project_.empty()) {
    MapLayerJSAssetVersion layerJSVersion;
    if (config.is_mercator_) {
      // Though we know whether database is Mercator Map, we need to detect
      // sub-type of imagery project since Mercator Map Database may contain
      // either Mercator or Flat imagery project.
      AssetVersion imagery_project_version(config.imagery_project_);
      assert(imagery_project_version->type == AssetDefs::Imagery);
      bool is_mercator_imagery_project =
        imagery_project_version->subtype == kMercatorProjectSubtype;

      layerJSVersion = is_mercator_imagery_project ?
        MercatorRasterProjectAssetVersionD(
          config.imagery_project_)->GetLayerJSVersion():
        RasterProjectAssetVersionD(
          config.imagery_project_)->GetLayerJSVersion();
    } else {
      layerJSVersion = RasterProjectAssetVersionD(
          config.imagery_project_)->GetLayerJSVersion();
    }

    if (!layerJSVersion) {
      throw khException(kh::tr("INTERNAL ERROR: No MapLayerJS found for imagery project"));
    }
    mapdbgen_config.imagery_layerdefs_path_ =
      layerJSVersion->GetOutputFilename(0);
  }
  mapdbgen_config.database_version_ = config.database_version_;
  mapdbgen_config.fusion_version_ = GEE_VERSION;

  std::string configfile = WorkingFilename("config.xml"); // fully bound name
  if (!mapdbgen_config.Save(configfile)) {
    throw khException(kh::tr("Unable to save %1").arg(configfile.c_str()));
  }

  // ******************************************************
  // Create and submit the task that will invoke the script
  // ******************************************************
  TaskDef task(*this);
  std::vector<std::string> inputs;
  GetInputFilenames(inputs);
  task.AddInputs(inputs);

  // TODO: - implement size estimate
  task.AddOutput(WorkingFileRef(kMapdbBase),
                 0); // size estimate

  task << "mapdbgen"
       << "--config" << configfile
       << "--output" << "$OUTPUT";
  theAssetManager.SubmitTask(GetRef(), task);
}
