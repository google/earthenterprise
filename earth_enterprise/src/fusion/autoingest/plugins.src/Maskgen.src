// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      Maskgen
#config Base      Leaf
#config Config    MaskgenConfig
#config Subtype   Maskgen
// #config FixedType
#config WithReuse 1


// ===== MaskgenAsset.h =====
#include <autoingest/.idl/storage/MaskgenConfig.h>

// ===== MaskgenAsset.cpp =====

// ===== MaskgenAssetD.h =====

// ===== MaskgenAssetD.cpp =====
void
MaskgenAssetVersionImplD::DoSubmitTask(void)
{
  TaskDef task(*this);
  std::vector<std::string> inputs;
  GetInputFilenames(inputs);
  task.AddInputs(inputs);

  // sizeEstimate - we use --maxsize 16000 so estimate w/ 18000
  // just to be safe
  std::uint64_t sizeEstimate = 18000 * 18000 * 1 * sizeof(char);
  task.AddOutput(WorkingFileRef("mask.tif"),
                 sizeEstimate); // size estimate

  task << "gemaskgen";

  switch (config.mode) {
    case MaskgenConfig::Mask:
      task << "--mask";
      break;
    case MaskgenConfig::Prep:
      task << "--prep";
      break;
    case MaskgenConfig::Preview:
      task << "--preview";
      break;
    case MaskgenConfig::Unset:
    default:
      throw khException(kh::tr("Internal Error: maskgen mode is unset"));
  }
  task << "--band"      << config.band
       << "--feather"   << config.feather
       << "--holesize"  << config.holesize;

  if (config.nodata.empty()) {
    task << "--tolerance" << config.threshold;
    if (config.fillvalue >= 0)
      task << "--fill" << config.fillvalue;
  } else {
    task << "--fillvalues" << config.nodata;
  }
  if (config.whitefill)
    task << "--whitefill";

  task << "$INPUT"
       << "$OUTPUT";

  // priority of -1 means slightly higher priority than the default 0
  theAssetManager.SubmitTask(GetRef(), task, -1);
}
