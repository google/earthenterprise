// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      MapPOI
#config Base      Leaf
#config Config    MapPOIAssetConfig
#config Subtype   MapPOI
#config FixedType Map


// ===== MapPOIAsset.h =====
#include <autoingest/.idl/storage/MapPOIAssetConfig.h>
#include <autoingest/.idl/storage/MapProjectConfig.h>

// ===== MapPOIAsset.cpp =====

// ===== MapPOIAssetD.h =====
#include <autoingest/.idl/storage/MapProjectConfig.h>

// ===== MapPOIAssetD.cpp =====
#include <khFileUtils.h>
#include <khstrconv.h>

void
MapPOIAssetVersionImplD::DoSubmitTask(void)
{
  notify(NFY_DEBUG,"MapPOIAssetVersionImplD::DoSubmitTask\n");

  // *******************************************************************
  // Determine our bound input filenames
  //    The first input is the vector product file. The second input is
  // our VectorQuery which can have multiple outputs (one for each
  // filter)
  // *******************************************************************

  int layer = 0;
  int index = 0;

  TaskDef task(*this);
  task << "gevectorpoi";

  // For map projects there are several map layers. Start a task for each one:
  //
  for (const auto &input : inputs) {

    std::vector<std::string> selectfiles;
    AssetVersion query(input);
    query->GetOutputFilenames(selectfiles);

    // If there are no search fields continue w/ next layer:
    if (config.all_search_fields_[layer].search_fields_.size() < 1) {
      layer++;
      continue;
    }

    // add the product file to the task's inputs
    // the selectfiles will be added in the loop below
    std::string productfile =
      AssetVersion(config.all_search_fields_[layer].assetref_)->GetOutputFilename(0);
    task.AddInput(productfile);

    // ******************************************************
    // write out the mappoiconfig.xml file used by gevectorpoi
    // ******************************************************
    MapPOIConfig poi_config;
    for (unsigned int i = 0; i < selectfiles.size(); ++i) {
      // Skip any selectfile that doesn't exist. We have to do this since a
      // query step may result in zero selected elements. When this is the
      // case, the query step does NOT produce an output file. But if we pass
      // a filename of a non-existent file to gevectorfuse, it is
      // unhappy. Maybe later we can get gevectorquery & gevectorfuse to be
      // consistent in their handling of the "no records selected" case
      if (khExists(selectfiles[i])) {
        poi_config.query_files_.push_back(selectfiles[i]);
        task.AddInput(selectfiles[i]);
      }
    }
    poi_config.search_fields_ = config.all_search_fields_[layer].search_fields_;
    std::string config_filename = WorkingFilename( "mappoiconfig_" + ToString(layer) + ".xml" );
    poi_config.Save(config_filename);

    // generate .search filename based on my name
    // TODO: - implement size estimates
    std::string poi_path = WorkingFileRef("mappoifile_" + ToString(layer));
    task.AddOutput(poi_path, 0); // size estimate

    std::string inputs("$INPUTS[");
    inputs.append(ToString(index));
    inputs.append("]");

    std::string outputs("$OUTPUTS[");
    outputs.append(ToString(index));
    outputs.append("]");

    task << "--output"  << outputs
    << "--product" << productfile.c_str()
    << "--config" << config_filename;

    layer++;
    index++;
  }

  // submit the task
  theAssetManager.SubmitTask(GetRef(), task);

}
