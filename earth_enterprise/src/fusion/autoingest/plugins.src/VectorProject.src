// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      VectorProject
#config Base      Composite
#config Config    VectorProjectConfig
#config Subtype   Project
#config FixedType Vector


// ===== VectorProjectAsset.h =====
#include <autoingest/.idl/storage/VectorProjectConfig.h>

#include <khstl.h>
#include "VectorGEIndexAsset.h"
#include "VectorDBRootAsset.h"
#include <limits>

class VectorProjectAssetVersionImpl {
 public:
  void GetPOIFiles(std::vector<std::string> &out) const;

  VectorDBRootAssetVersion GetDBRootVersion(void) const {
    if (children.size() > 1) {
      AssetVersion index(children[1]);
      if (index->subtype == "VectorDBRoot") {
        return children[1];
      } else {
        return VectorDBRootAssetVersion();
      }
    } else {
      return VectorDBRootAssetVersion();
    }
  }
  VectorGEIndexAssetVersion GetGEIndexVersion(void) const {
    if (children.size()) {
      AssetVersion index(children[0]);
      if (index->subtype == "VectorGEIndex") {
        return children[0];
      } else {
        return VectorGEIndexAssetVersion();
      }
    } else {
      return VectorGEIndexAssetVersion();
    }
  }
};


// ===== VectorProjectAsset.cpp =====
#include <autoingest/plugins/VectorLayerAsset.h>
#include <autoingest/plugins/VectorFuseAsset.h>
#include <limits>

void
VectorProjectAssetVersionImpl::GetPOIFiles(std::vector<std::string> &out) const
{
  // skip index and dbroot, the rest are our layer children
  for (unsigned int i = 2; i < children.size(); ++i) {
    VectorLayerAssetVersion layer(children[i]);
    std::string poifile = layer->GetPOIFile();
    if (!poifile.empty()) {
      out.push_back(poifile);
    }
  }
}


// ===== VectorProjectAssetD.h =====
class VectorProjectAssetImplD {
 protected:
  void AddLayers(const std::vector<VectorProjectAddItem> &items);
  void SyncInputRefs(void);
  void PostUpdate(void) { IncrementIndexVersion(); }

 public:
  void IncrementIndexVersion(void) {
    // quad tree packets store unsigned short for tile versions
    config.indexVersion = (config.indexVersion + 1) %
                          std::numeric_limits<unsigned short>::max();
  }

  static void HandleEditRequest(const VectorProjectEditRequest &);
  static void HandleNewRequest(const VectorProjectNewRequest &);
  static void HandleModifyRequest(const VectorProjectModifyRequest &);
  static void HandleAddToRequest(const VectorProjectModifyRequest &);
  static void HandleDropFromRequest(const VectorProjectDropFromRequest &);
};


// ===== VectorProjectAssetD.cpp =====
#include <autoingest/sysman/plugins/VectorProductAssetD.h>
#include <autoingest/sysman/plugins/VectorLayerAssetD.h>
#include <autoingest/sysman/plugins/VectorDBRootAssetD.h>
#include <autoingest/sysman/plugins/VectorGEIndexAssetD.h>
#include <khFileUtils.h>
#include <set>
#include <sys/types.h>
#include <dirent.h>


static inline
bool ByChannelId(const LayerConfig &a, const LayerConfig &b)
{
  return a.channelId < b.channelId;
}


void
VectorProjectAssetImplD::AddLayers(const std::vector<VectorProjectAddItem> &items)
{
  // pre-fetch the ids that I can hand out
  AvailId availChannelIds = config.GetAvailChannelIds();
  AvailId availStyleIds   = config.GetAvailStyleIds();

  // process each item to add
  for (std::vector<VectorProjectAddItem>::const_iterator item =
         items.begin(); item != items.end(); ++item) {

    // load the template file
    LayerConfig layerConfig;
    if (!layerConfig.Load(item->templateFile)) {
      throw khException(kh::tr("Unable to load ") + item->templateFile);
    }

    // instantiate the template - assign the relavent refs and ids
    layerConfig.assetRef = item->productRef;
    layerConfig.channelId = availChannelIds.next();

    // Force a new UUID since we're adding a new layer to this project.
    // Note: that template configs may have a UUID which we DO NOT want
    // to propagate here.
    layerConfig.asset_uuid_ = "";
    layerConfig.AssignUuidIfEmpty();

    layerConfig.AssignStyleIds(availStyleIds);


    // Add the new layer to my config
    config.AddLayer(layerConfig);
  }

  SyncInputRefs();
}


void
VectorProjectAssetImplD::SyncInputRefs(void)
{
  // update my inputs based on which layers have assetRefs
  inputs.clear();
  for (std::vector<LayerConfig>::const_iterator layerConfig
         = config.layers.begin();
       layerConfig != config.layers.end(); ++layerConfig) {
    // skip layers marked with the 'skip' flag
    // the fusion user has turned these off and doesn't want them to be
    // processed at all
    if (layerConfig->skipLayer) {
      continue;
    }

    // only add inputs for real streamed layers
    // ignore KMLLayers, folders, etc.
    if (!layerConfig->IsStreamedLayer()) {
      continue;
    }

    inputs.push_back(layerConfig->assetRef);
  }
}


void
VectorProjectAssetImplD::HandleEditRequest(const VectorProjectEditRequest &req)
{
  // Make sure the assetRef's are valid.
  for (std::vector<LayerConfig>::const_iterator layerConfig
         = req.config.layers.begin();
       layerConfig != req.config.layers.end(); ++layerConfig) {

    // Only bother validating for real streamed layers.
    if (!layerConfig->IsStreamedLayer())
      continue;

    ValidateRefForInput<VectorProductAssetVersionD>(layerConfig->assetRef);
  }

  // Find/make our target project.
  std::string projname =
    khEnsureExtension(req.assetname,
                      AssetDefs::FileExtension(AssetDefs::Vector,
                                               kProjectSubtype));
  // Will be filled in later.
  std::vector<SharedString> inputs;

  // Custom FindMake - modified to set/preserve indexVersion and IDs.

  MutableVectorProjectAssetD project = Find<VectorProjectAssetD>(projname);
  if (project) {
    // We must preserve the indexVersion since the GUI doesn't/can't.
    // TODO: We really should split this VectorProjectConfig into two pieces.
    VectorProjectConfig projConfig = req.config;
    projConfig.indexVersion = project->config.indexVersion;

    // Note: Seems, we do not try to restore the asset_uuid from
    // a previous version of the config since it is not trivial.
    // The VectorProject asset has list of layer's sub-assets (not available
    // for user as a separate asset in the asset manager), and they may be
    // re-ordered in project. A new asset_uuid is also generated when modifying
    // vector project with the console tool.
    // Restoring of previous version of asset_uuid may be implemented if we
    // take the layer-asset out of the VectorProject, and make it a regular
    // asset available for user like the MapLayer asset.
    // Note: Currently, to support unique IDs in a "SaveAs"
    // use-case, we generate new IDs (asset_uuid, channelId) in client (Fusion
    // UI).
    project->Modify(inputs, req.meta, projConfig);
  } else {
    // It is a "Save" or "SaveAs" edit request when creating a new asset.
    assert(req.config.indexVersion == 1);
    project = AssetFactory::Make<MutableVectorProjectAssetD, VectorProjectConfig>(projname, inputs,
                                         req.meta, req.config);
  }

  if (!project)
    throw khException(kh::tr("Unable to create vector project: ") +
                      projname);

  // Note: All IDs should be assigned in the request. They are
  // assigned in a client (Fusion UI, gstVectorProject::AssembleEditRequest()),
  // but it is safe/safer to keep this aasignment.
  // At the same time, there is some inconsistency with updating any fields in
  // an asset here, since the client has its own copy of layer configs in
  // gstVectorProject, and it is not being synced with storage during a project
  // editing-session.
  project->config.AssignChannelIdsIfZero();
  project->config.AssignStyleIdsIfZero();
  project->SyncInputRefs();
}



/******************************************************************************
 ***  VectorProjectNewRequest - used only by the commandline
 ******************************************************************************/
void
VectorProjectAssetImplD::HandleNewRequest(const VectorProjectNewRequest &req)
{
  // make sure the product refs are valid
  for(std::vector<VectorProjectAddItem>::const_iterator item =
        req.items.begin();
      item != req.items.end(); ++item) {

    ValidateRefForInput<VectorProductAssetVersionD>(item->productRef);
  }

  // normalize the supplied asset name
  std::string projname =
    AssetDefs::NormalizeAssetName(req.assetname,
                                  AssetDefs::Vector, kProjectSubtype);

  if (Find<VectorProjectAssetD>(projname)) {
    throw khException(kh::tr("Vector project %1 already exists")
                      .arg(ToQString(projname)));
  } else {
    // make it
    VectorProjectConfig projConfig(VectorProjectConfig::Standard,
                                   1,   // indexVersion
                                   std::vector<LayerConfig>());
    MutableVectorProjectAssetD project =
      AssetFactory::Make<MutableVectorProjectAssetD, VectorProjectConfig>(projname,
                                 std::vector<SharedString>(),
                                 khMetaData(),
                                 projConfig);

    project->AddLayers(req.items);
  }
}


/******************************************************************************
 ***  VectorProjectModifyRequest - used only by the commandline
 ******************************************************************************/
void
VectorProjectAssetImplD::HandleModifyRequest(const VectorProjectModifyRequest &req)
{
  // make sure the product refs are valid
  for(std::vector<VectorProjectAddItem>::const_iterator item =
        req.items.begin();
      item != req.items.end(); ++item) {

    ValidateRefForInput<VectorProductAssetVersionD>(item->productRef);
  }

  // find it and make the change
  MutableVectorProjectAssetD project;
  if ((project = Find<VectorProjectAssetD>(req.assetname))) {
    // blow away old layers
    project->config.layers.clear();
    // define new ones
    project->AddLayers(req.items);
  } else {
    throw khException(kh::tr("No Vector project named %1")
                      .arg(ToQString(req.assetname)));
  }
}


/******************************************************************************
 ***  VectorProjectModifyRequest - used only by the commandline
 ******************************************************************************/
void
VectorProjectAssetImplD::HandleAddToRequest(const VectorProjectModifyRequest &req)
{
  // make sure the product refs are valid
  for(std::vector<VectorProjectAddItem>::const_iterator item =
        req.items.begin();
      item != req.items.end(); ++item) {

    ValidateRefForInput<VectorProductAssetVersionD>(item->productRef);
  }

  // find it and make the change
  MutableVectorProjectAssetD project;
  if ((project = Find<VectorProjectAssetD>(req.assetname))) {
    // add the new ones
    project->AddLayers(req.items);
  } else {
    throw khException(kh::tr("No Vector project named %1")
                      .arg(ToQString(req.assetname)));
  }
}


/******************************************************************************
 ***  VectorProjectDropFromRequest - used only by the commandline
 ******************************************************************************/
void
VectorProjectAssetImplD::HandleDropFromRequest(const VectorProjectDropFromRequest &req)
{
  // find the project
  MutableVectorProjectAssetD project;
  if (!(project = Find<VectorProjectAssetD>(req.assetname))) {
    throw khException(kh::tr("No Vector project named %1")
                      .arg(ToQString(req.assetname)));
  }

  // check for valid layer names & asset refs
  std::set<QString> todrop;
  std::set<QString> droppedGroups;
  for (std::vector<VectorProjectDropFromRequest::Item>::const_iterator
         i = req.items.begin(); i != req.items.end(); ++i) {
    if (!i->layername.isEmpty()) {
      bool found = false;
      for (std::vector<LayerConfig>::const_iterator layer =
             project->config.layers.begin();
           layer != project->config.layers.end(); ++layer) {
        if (layer->DefaultNameWithPath() == i->layername) {
          if (layer->IsFolder()) {
            // group
            droppedGroups.insert(i->layername);
          }
          found = true;
        }
      }

      if (!found) {
        throw khException(kh::tr("Project has no layer named '%1'")
                          .arg(i->layername));
      } else {
        todrop.insert(i->layername);
      }
    } else {
      std::vector<QString> found;
      for (std::vector<LayerConfig>::const_iterator layer =
             project->config.layers.begin();
           layer != project->config.layers.end(); ++layer) {
        if (layer->assetRef == i->assetRef) {
          found.push_back(layer->DefaultNameWithPath());
        }
      }
      if (found.empty()) {
        throw khException(kh::tr("Project doesn't have vector asset '%1'")
                          .arg(i->assetRef));
      } else if (found.size() > 1) {
        throw khException(kh::tr("Project has vector asset '%1' in multiple layers.\nPlease specify by layer name:\n")
                          .arg(i->assetRef) +
                          qstring_join(found.begin(), found.end(),
                                       "\n"));
      } else {
        todrop.insert(found[0]);
      }
    }
  }


  // generate a list of the ones we want to keep and stuff it back into the
  // config
  std::vector<LayerConfig> tokeep;
  for (std::vector<LayerConfig>::const_iterator layer =
         project->config.layers.begin();
       layer != project->config.layers.end(); ++layer) {
    if (todrop.find(layer->DefaultNameWithPath()) == todrop.end()) {
      // this one's not in the list to drop, so copy it over
      tokeep.push_back(*layer);

      // make sure we haven't tried to take away it's parent
      if (droppedGroups.find(layer->legend) != droppedGroups.end()) {
        throw khException(kh::tr("Group '%1' is not empty. Cannot drop from project.")
                          .arg(layer->legend));
      }
    }
  }
  project->config.layers = tokeep;


  project->SyncInputRefs();
}


void
VectorProjectAssetVersionImplD::UpdateChildren(void)
{
  std::string assetRef = GetAssetRef();
  std::vector<MutableAssetVersionD> layers;
  std::vector<SharedString> vecfuses;
  std::vector<AssetVersion> vecfusevers;
  std::map<unsigned int, AssetVersion> vecfusemap;

  vecfuses.reserve(config.layers.size());
  vecfusevers.reserve(config.layers.size());


  // ***** load my input versions (only if they aren't already loaded)
  // I'll use this list of my inputs to pass to my children so they don't
  // have to look them up over and over again
  InputVersionGuard guard(this);

  std::vector<LayerConfig> usedLayers;
  usedLayers.reserve(config.layers.size());
  std::vector<std::uint32_t> usedProviderIds;
  usedProviderIds.reserve(config.layers.size());

  // ******************************
  // create my layers
  // ******************************
  unsigned int i = 0;
  for (std::vector<LayerConfig>::const_iterator layerConfig
         = config.layers.begin();
       layerConfig != config.layers.end(); ++layerConfig) {

    // skip layers and groups marked with the 'skip' flag
    // the fusion user has turned these off and doesn't want them to be
    // processed at all
    if (layerConfig->skipLayer) {
      continue;
    }

    // remember the ones we actually use, so we can send them to
    // the dbRoot plugin
    usedLayers.push_back(*layerConfig);

    // skip the layer unless its a real streamed layer
    // (e.g. skip KMLLayers, folders, etc)
    if (!layerConfig->IsStreamedLayer()) {
      // we have to keep the two lists in sync. So add a dummy.
      usedProviderIds.push_back(0);
      continue;
    }

    // give them each their input vector product and their piece
    // of the config
    unsigned int channelId = layerConfig->channelId;
    VectorProductAssetVersion kvp(guard->inputvers[i++]);
    usedProviderIds.push_back(kvp->config.provider_id_);


    // make the layer name from the channelId
    char layername[32];
    snprintf(layername, sizeof(layername), "layer%03d", channelId);

    MutableAssetVersionD layer =
      AssetFactory::FindMakeAndUpdateSubAsset<MutableVectorLayerAssetVersionD, AssetVersion>
                    (assetRef,
                     layername,
                     makevec1<SharedString>(kvp->GetRef()),
                     khMetaData(),
                     *layerConfig,
                     makevec1<AssetVersion>(kvp));

    // Save the ref to this layer's current VectorFuseAssetVersion
    //     My other two children need them. We store it in a vector and
    // a map because one child wants them in my order and the other
    // wants them in channelId order
    AssetVersion vecfuse(layer->children[0]);
    vecfuses.push_back(vecfuse->GetRef());
    vecfusevers.push_back(vecfuse);
    vecfusemap.insert(std::make_pair(channelId, vecfuse));

    // add the layer to my list
    layers.push_back(layer);
  }


  // ******************************
  // create my GEIndex
  // ******************************
  {
    // make his name like mine
    std::string basename = khDropExtension(khBasename(assetRef));
    // we leave packvers empty for the asset, just the assetver uses it
    std::vector<VectorPacketVersion> packvers;

    VectorGEIndexConfig geindexConfig(basename,             // dbname
                                      config.indexVersion,
                                      packvers);

    // We want his inputs to be the VectorFuseAsset children of my layers
    // They MUST be sorted by channelId & not client display order, which
    // is how mine are listed. That way a reorder of the layers will not
    // force a re-index.
    std::vector<SharedString> geindexinputs;
    std::vector<AssetVersion> geindexinputvers;
    geindexinputs.reserve(vecfusemap.size());
    geindexinputvers.reserve(vecfusemap.size());
    for (std::map<unsigned int, AssetVersion>::const_iterator pair
           = vecfusemap.begin();
         pair != vecfusemap.end(); ++pair) {
      geindexinputs.push_back(pair->second->GetRef());
      geindexinputvers.push_back(pair->second);
    }

    // make it my first child
    MutableAssetVersionD geindex =
      AssetFactory::FindMakeAndUpdateSubAsset<MutableVectorGEIndexAssetVersionD, AssetVersion>
                    (assetRef,
                    "geindex",
                    geindexinputs,
                    khMetaData(),
                    geindexConfig,
                    geindexinputvers);
    AddChild(geindex);
  }


  // ******************************
  // create my dbRoot
  // ******************************
  {
    VectorDBRootConfig dbrootConfig(usedLayers,
                                    usedProviderIds);

    // Empty out the meta from the layer config. We don't want changes there
    // to trigger a new dbroot
    for (unsigned int i = 0; i < dbrootConfig.layers.size(); ++i) {
      dbrootConfig.layers[i].meta = khMetaData();
    }

    // make it my second child
    // We want his inputs to be the VectorFuseAsset children of my layers
    // They MUST be sorted in client display order, which
    // is how mine are listed. That way a reorder of the layers will force
    // a new dbRoot
    MutableAssetVersionD dbroot =
      AssetFactory::FindMakeAndUpdateSubAsset<MutableVectorDBRootAssetVersionD, AssetVersion>
                           (assetRef,
                           "dbroot",
                           vecfuses,
                           khMetaData(),
                           dbrootConfig,
                           vecfusevers);
    AddChild(dbroot);
  }


  // now add all my layers as my remaining children
  AddChildren(layers);
}
