// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      VectorProduct
#config Base      Leaf
#config Config    VectorProductConfig
#config Subtype   Product
#config FixedType Vector


// ===== VectorProductAsset.h =====
#include <autoingest/.idl/storage/VectorProductConfig.h>
class VectorProductAssetImpl {
 public:
  virtual void      AfterLoad(void);
};

class VectorProductAssetVersionImpl {
 public:
  virtual void      AfterLoad(void);
};


// ===== VectorProductAsset.cpp =====
#include <autoingest/.idl/gstProvider.h>

namespace {
void GetProviderFromMeta(VectorProductConfig &config, khMetaData &meta) {
  if (config.provider_id_ == 0) {
    std::string providerkey = meta.GetValue("provider").toUtf8().constData();
    if (!providerkey.empty()) {
      config.provider_id_ = gstProviderSet::LoadAndGetIdFromKey(providerkey);
      meta.Erase("provider");
    }
  }
}
}

void VectorProductAssetImpl::AfterLoad(void) {
  GetProviderFromMeta(config, meta);
}

void VectorProductAssetVersionImpl::AfterLoad(void) {
  GetProviderFromMeta(config, meta);
}


// ===== VectorProductAssetD.h =====
class VectorProductAssetImplD {
 public:
  static void HandleImportRequest(const VectorProductImportRequest &);
};

// ===== VectorProductAssetD.cpp =====
#include <autoingest/sysman/plugins/SourceAssetD.h>
#include <khException.h>
#include <khGuard.h>
#include <autoingest/.idl/gstProvider.h>

void
VectorProductAssetImplD::HandleImportRequest(const VectorProductImportRequest &req)
{
  // make sure the provider exists
  if ((req.config.provider_id_ != 0) &&
      !gstProviderSet::LoadAndValidateProvider(req.config.provider_id_)) {
    throw khException(kh::tr("Invalid provider id: %1")
                      .arg(req.config.provider_id_));
  }

  // make sure we have at least one source
  if (req.sources.sources.empty()) {
    throw khException(kh::tr("No sources provided"));
  }

  // normalize the supplied asset name
  std::string assetname =
    AssetDefs::NormalizeAssetName(req.assetname,
                                  AssetDefs::Vector, kProductSubtype);

  // find/make our target asset
  MutableVectorProductAssetD asset =
    AssetFactory::FindMake<MutableVectorProductAssetD>
        (assetname,
         std::vector<SharedString>(),
         req.meta,
         req.config);
  if (!asset) {
    std::string msg { kh::tr("Unable to create vector asset ").toUtf8().constData() };
    msg += assetname;
    throw khException(msg.c_str());
  }

  // Get our source asset
  MutableAssetVersionD source =
    AssetFactory::ReuseOrMakeAndUpdateSubAsset
      <MutableSourceAssetVersionD, SourceConfig, SourceAssetVersionD>
      (asset->GetRef(),
       AssetDefs::Vector,
       "source",
       req.meta,
       req.sources);


  // make sure the asset points to our newly created/updated source
  asset->inputs.push_back(source->GetRef());
}

void
VectorProductAssetVersionImplD::DoSubmitTask(void)
{
  std::vector<std::string> inputs;
  GetInputFilenames(inputs);

  if ((inputs.size() == 1) && (khExtension(inputs[0]) == ".kvp")) {
    // ----- Our input is already a product, just reference its file -----
    outfiles.push_back(inputs[0]);
    SetState(AssetDefs::Succeeded);

  } else {
    // ----- Our input is raw source, make a task to call gevectorimport -----
    TaskDef task(*this);
    task.AddInputs(inputs);

    // TODO: - implement size estimate
    task.AddOutput(WorkingFileRef("product.kvp"),
                   0); // size estimate


    // save the filelist for gevectorimport to use
    std::string filelist = WorkingFilename("files.list");
    khEnsureParentDir(filelist);
    FILE *FILELIST = fopen(filelist.c_str(), "w");
    if (!FILELIST) {
      std::string msg { kh::tr("Unable to write ").toUtf8().constData() };
      msg += filelist;
      throw khErrnoException(msg.c_str());
    }
    {
      // guarantee that the file will be closed (even in case of exception)
      khFILECloser fileCloser(FILELIST);

      for (std::vector<TaskDef::Input>::const_iterator i=task.inputs.begin();
           i != task.inputs.end(); ++i) {
        fprintf(FILELIST, "%s\n",
                AssetDefs::AssetPathToFilename(i->path).c_str());
      }
    }

    // submit the task
    task << "gevectorimport"
         << "--layer" << config.layer
         << "--filelist" << filelist
         << "--output" << "$OUTPUT";
    if (!config.encoding.empty()) {
      task << "--encoding" << config.encoding;
    }
    if ( config.scale != 1 ) {
      task << "--scale" << config.scale;
    }

    if ( config.force3D ) {
      assert(!(config.force2D || config.force25D));
      task << "--force3D";
    }
    if (config.force2D) {
      assert(!(config.force25D || config.force3D));
      task << "--force2D";
    }
    if (config.force25D) {
      assert(!(config.force2D || config.force3D));
      task << "--force25D";
    }
    if (config.ignore_bad_features_) {
      task << "--ignore_bad_features";
    }

    if (config.do_not_fix_invalid_geometries_) {
      task << "--do_not_fix_invalid_geometries";
    }

    task << "--north_boundary" << config.north_boundary;
    task << "--south_boundary" << config.south_boundary;
    task << "--east_boundary" << config.east_boundary;
    task << "--west_boundary" << config.west_boundary;

    theAssetManager.SubmitTask(GetRef(), task);
  }
}
