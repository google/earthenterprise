// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#config Name      VectorQuery
#config Base      Leaf
#config Config    QueryConfig
#config Subtype   VectorQuery
#config FixedType Vector


// ===== VectorQueryAsset.h =====
#include <autoingest/.idl/storage/QueryConfig.h>

// ===== VectorQueryAsset.cpp =====

// ===== VectorQueryAssetD.h =====
class VectorQueryAssetVersionImplD {
 protected:
  virtual bool OfflineInputsBreakMe(void) const { return true; }
};

// ===== VectorQueryAssetD.cpp =====
void
VectorQueryAssetVersionImplD::DoSubmitTask(void)
{
  // save the config to a file for gevectorquery to use
  std::string queryConfigFilename = WorkingFilename("queryconfig.xml");
  config.Save(queryConfigFilename);

  TaskDef task(*this);
  std::vector<std::string> inputs;
  GetInputFilenames(inputs);
  task.AddInputs(inputs);

  // generate the output filenames
  for (unsigned int i = 0; i < config.filters.size(); ++i) {
    char fname[100];
    snprintf(fname, sizeof(fname), "selectlist.%02d", i);
    // TODO: - implement size estimate
    task.AddOutput(WorkingFileRef(fname),
                   0); // size estimate
  }

  // submit the task
  task << "gevectorquery"
       << "-o" << "$OUTPUTS[0]:sansext"
       << "-p" << "$INPUT"
       << "-c" << queryConfigFilename;
  theAssetManager.SubmitTask(GetRef(), task);
}
