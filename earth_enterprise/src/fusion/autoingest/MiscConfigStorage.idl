// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <string>
#include <khTypes.h>
#include <autoingest/.idl/Systemrc.h>
#include <khFileUtils.h>
#include <notify.h>

class MiscConfigStorage {
  enum GraphOpsType { NO_GRAPH_OPS = 0, FAST_GRAPH_OPS = 1, ALL_GRAPH_OPS = 2 };

  // delay between writing a file and reading it from NFS in order to
  // help work around the delayed NFS visibility problem.
  uint         NFSVisibilityDelay = uint(0);

  // The maximum number of objects allowed in each cache
  uint         AssetCacheSize = uint(128000);
  uint         VersionCacheSize = uint(128000);

  // The maximum amount of memory allocated for each cache in bytes.
  uint64       MaxAssetCacheMemorySize = uint64(805306368);
  uint64       MaxVersionCacheMemorySize = uint64(2415919104);

  bool         LimitMemoryUtilization = false;

  // The cache will only be pruned if the size of the dirty map is less than or equal to this fraction of the cache.
  float         PrunePercentage = float(100);
  
  bool         GenerateProductPreviews = true;
  uint         MutexTimedWaitSec = uint(30);
  uint         PackGenAnalysisThreads = uint(1);
  GraphOpsType GraphOperations = MiscConfigStorage::NO_GRAPH_OPS;

  // True to minify previous levels, false to build from source imagery and terrain
  bool         UseMinification = true;

  uint         TriesPerCommand = uint(1);
  uint         SleepBetweenCommandTriesSec = uint(0);

#pragma LoadAndSave

#hquote
 public:
  static std::string Filename(void) {
    // NOTE: This intentionally doesn't call geAssetDefs::Filename
    // because we don't wan't users of MiscConfig to necessarily have to
    // link against autoingest.
    static std::string assetroot = Systemrc::TryAssetRoot();
    if (!assetroot.empty()) {
      return khComposePath(assetroot, ".config/misc.xml");
    } else {
      return std::string();
    }
  }
 protected:
  bool Load(void) throw() {
    static std::string filename = Filename();
    if (!filename.empty()) {
      return Load(filename);
    } else {
      return true;
    }
  }
  bool Save(void) const throw() {
    static std::string filename = Filename();
    if (!filename.empty()) {
      return Save(Filename());
    } else {
      notify(NFY_WARN, "Unable to save MiscConfig to emtpty filename");
      return false;
    }
  }
#/hquote
};
