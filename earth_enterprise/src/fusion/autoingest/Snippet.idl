// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdint>
#include <map>
#include <string>
#include <vector>
#include <qstring.h>

class SnippetSet
{
  class Locale {
    enum Location { Beginning, End, NumLocs_ };
    QString  name;
    QString  text = QString();
    Location loc  = SnippetSet::Locale::End;
  };

#hquote
  typedef std::map<QString, SnippetSet::Locale> LocaleMap;
  typedef std::map<QString, SnippetSet::Locale>::iterator LocaleMapIterator;
  typedef std::map<QString, SnippetSet::Locale>::const_iterator LocaleMapConstIterator;
#/hquote

  class Snippet {
    SnippetSet::Locale default_locale;
    std::map<QString, SnippetSet::Locale> locales;

#hquote
    SnippetSet::Locale LocalizedSnippet(const QString& locale) const {
      std::map<QString, SnippetSet::Locale>::const_iterator found = locales.find(locale);
      if (found != locales.end()) {
        return (*found).second;
      } else {
        return default_locale;
      }
    }
    Snippet(const QString &name) : default_locale(name) { }
#/hquote
  };

  std::vector<SnippetSet::Snippet> snippets;


#pragma LoadAndSave
#pragma StrLoadAndSave
#hquote
  static std::string SnippetsFilename(void);
  bool Load(void);
  bool Save(void);

#/hquote

#cppquote
#include <autoingest/.idl/storage/AssetDefs.h>
#include <autoingest/geAssetRoot.h>
#include <khFileUtils.h>

  std::string
  SnippetSet::SnippetsFilename(void)
  {
    return khComposePath(geAssetRoot::Dirname(AssetDefs::AssetRoot(),
                                              geAssetRoot::UserDataDir),
                         "snippets.xml");
  }

  bool
  SnippetSet::Load(void)
  {
    std::string filename = SnippetsFilename();
    if (!khExists(filename)) {
      // missing file means empty, it's not an error
      return true;
    }
    return Load(filename.c_str());
  }

  bool
  SnippetSet::Save(void)
  {
    std::string filename = SnippetsFilename();
    if (Save(filename)) {
      khChmod(filename, 0666); // in case the umask trimmed any permissions
      return true;
    } else {
      return false;
    }
  }


#/cppquote

};
