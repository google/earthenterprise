// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <cstdint>
#include <string>
#include <vector>
#include <qstring.h>

class StreamServerConfig
{
  QString name;
  QString hostname;
  QString vhostname;
  QString description;
};

class StreamServerConfigSet
{
  std::vector<StreamServerConfig> items;

#pragma LoadAndSave
#hquote
  static std::string ServersFilename(void);
  bool Load(void);
  bool Save(void);
#/hquote

#cppquote
#include <autoingest/.idl/storage/AssetDefs.h>
#include <autoingest/geAssetRoot.h>
#include <khFileUtils.h>

  std::string
  StreamServerConfigSet::ServersFilename(void)
  {
    return khComposePath(geAssetRoot::Dirname(AssetDefs::AssetRoot(),
                                              geAssetRoot::UserDataDir),
                         "streamservers.xml");
  }

  bool
  StreamServerConfigSet::Load(void)
  {
    std::string filename = ServersFilename();
    if (!khExists(filename)) {
      // missing providers file means empty, it's not an error
      return true;
    }
    return Load(filename.c_str());
  }

  bool
  StreamServerConfigSet::Save(void)
  {
    std::string filename = ServersFilename();
    if (Save(filename)) {
      khChmod(filename, 0666); // in case the umask trimmed any permissions
      return true;
    } else {
      return false;
    }
  }


#/cppquote

};
