// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <string>
#include <map>
#include <vector>
#include <khTypes.h>
#include <common/SharedString.h>

class VolumeDefList
{
  class VolumeDef
  {
    std::string netpath;   // must NEVER change!
    std::string host;
    std::string localpath;
    // Note: The reserveSpace is 100 Mb which is the minimum amount of disk
    // space that will be left over once the asset is built.
    uint64      reserveSpace = (uint64)100000000;  // 100MB
    bool        isTmp = false;
  };

  std::map<std::string, VolumeDef> volumedefs;

#pragma LoadAndSave
#pragma StrLoadAndSave

#hquote
  typedef std::map<std::string, VolumeDef> VolumeDefMap;
  bool HasVolume(const std::string &volname) const;
  std::string VolumeHost(const std::string &volname) const;
#/hquote

#cppquote
  bool VolumeDefList::HasVolume(const std::string &volname) const {
    return volumedefs.find(volname) != volumedefs.end();
  }
  std::string VolumeDefList::VolumeHost(const std::string &volname) const {
    VolumeDefMap::const_iterator found = volumedefs.find(volname);
    if (found != volumedefs.end()) {
      return found->second.host;
    } else {
      return std::string();
    }
  }
#/cppquote

};

class VolumeReservations
{
  class Item {
    std::string path;
    uint64      size;
  };
  std::string       name;
  uint32            serial;
  std::vector<Item> items;

#pragma LoadAndSave
#pragma StrLoadAndSave
#hquote
  VolumeReservations(const std::string &n, uint32 s) :
      name(n), serial(s) { }
  VolumeReservations(const std::string &n, uint32 s,
                     const std::map<std::string, uint64> &mapitems) :
      name(n), serial(s)
  {
    for (std::map<std::string, uint64>::const_iterator e =
           mapitems.begin();
         e != mapitems.end(); ++e) {
      items.push_back(Item(e->first, e->second));
    }
  }
  void FillMap(std::map<std::string, uint64> &mapitems) {
    for (std::vector<Item>::const_iterator i = items.begin();
         i != items.end(); ++i) {
      mapitems[i->path] = i->size;
    }
  }
#/hquote
};

class VolumeAvailMsg
{
  std::string volname;
  uint32      serial;
  uint64      avail;
#pragma StrLoadAndSave
}
