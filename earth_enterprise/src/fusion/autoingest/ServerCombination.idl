// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <vector>
#include <qstring.h>


class ServerConfig {
  std::string url = std::string();
  std::string vs = std::string();
  // Options to control HTTPS/SSL connection.
  // The SSL certificate file path to verify the peer.
  std::string cacert_ssl = std::string();
  // Whether to perform "insecure" SSL connections and transfers.
  bool insecure_ssl = false;
};

class ServerCombination
{
  QString nickname = QString();
  ServerConfig stream = ServerConfig();
};


class ServerCombinationSet
{
  std::vector<ServerCombination> combinations;

#pragma LoadAndSave
#hquote
  static std::string ServerCombinationsFilename(void);
  void EnsureDefaultsExist(void);
  bool Load(void);
  bool Save(void);
#/hquote

#cppquote
#include <autoingest/.idl/storage/AssetDefs.h>
#include <autoingest/geAssetRoot.h>
#include <khFileUtils.h>

  std::string
  ServerCombinationSet::ServerCombinationsFilename(void)
  {
    return khComposePath(geAssetRoot::Dirname(AssetDefs::AssetRoot(),
                                              geAssetRoot::UserDataDir),
                         "serverAssociations.xml");
  }

  void
  ServerCombinationSet::EnsureDefaultsExist(void)
  {
    const QString kDefaultHost = AssetDefs::MasterHostName().c_str();

    std::vector<ServerCombination>::const_iterator it = combinations.begin();
    for (; it != combinations.end(); ++it) {
      if (it->nickname == kDefaultHost) {
        return;
      }
    }

    std::string default_url { "http://" };
    default_url += AssetDefs::MasterHostName();
    ServerConfig sc_default(default_url, kDefaultHost.toUtf8().constData());
    ServerCombination default_host(kDefaultHost.toUtf8().constData(), sc_default);

    combinations.push_back(default_host);
  }

  bool
  ServerCombinationSet::Load(void)
  {
    std::string filename = ServerCombinationsFilename();
    if (!khExists(filename)) {
      // If the file is missing we need to create default combinations.
      EnsureDefaultsExist();
      return true;
    }

    bool ret = Load(filename.c_str());
    if (ret) {
      // make sure we always check for default_ge and default_map combinations.
      EnsureDefaultsExist();
    }
    return ret;
  }

  bool
  ServerCombinationSet::Save(void)
  {
    std::string filename = ServerCombinationsFilename();
    if (Save(filename)) {
      khChmod(filename, 0666); // in case the umask trimmed any permissions
      return true;
    } else {
      return false;
    }
  }


#/cppquote

};

