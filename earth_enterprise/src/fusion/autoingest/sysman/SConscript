#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

Import('env', 'commonobj', 'plugins')
import string

# let subdirs refer to headers as relative to the sysman directory
env = env.Clone();
env.Append(CPPPATH = ['#fusion/autoingest/sysman', # static headers
                      ])

env.Append( CPPFLAGS=['-fopenmp'] )
env.Append( LINKFLAGS=['-fopenmp'] )

idlfiles = [ 'NextTaskId', 'JobStorage', 'TaskStorage', 'TaskRule',
             'FusionUniqueId' ]

env.idl(map(lambda n: n+'.idl', idlfiles))

TaskStorageObj = env.SharedObject('.idl/TaskStorage.cpp')
JobStorageObj  = env.SharedObject('.idl/JobStorage.cpp')
NextTaskIdObj  = env.SharedObject('.idl/NextTaskId.cpp')
TaskRuleObj    = env.SharedObject('.idl/TaskRule.cpp')
FusionUniqueIdObj  = env.SharedObject('.idl/FusionUniqueId.cpp')

for plugin in plugins:
    src = '../plugins.src/'+plugin+'.src'
    env.Command('plugins/'+plugin+'AssetD.h',
                [ '../AssetGenDaemonH.pl', '../AssetGen.pm', src ],
                [ "${SOURCES[0]} ${SOURCES[2]} $TARGET" ])
    env.Command('plugins/'+plugin+'AssetD.cpp',
                [ '../AssetGenDaemonCpp.pl', '../AssetGen.pm', src ],
                [ "${SOURCES[0]} ${SOURCES[2]} $TARGET" ])

env.Command('SysManFromStorage.cpp',
            [ '../FromStorageGen.pl' ],
            [ "$SOURCE --daemon --cppfile $TARGET " + string.join(plugins, ' ') ])

env.Command('khAssetManagerDispatch.cpp',
            [ '../ProtocolGen.pl', '../AssetManager.protocol' ],
            [ "${SOURCES[0]} --dispatchthunks --handlercpp $TARGET ${SOURCES[1]}" ])


# Resource Manager Protocol
env.Command('khResourceProviderProxyDispatch.cpp',
            [ '../ProtocolGen.pl', 'ResourceManager.protocol' ],
            [ "${SOURCES[0]} --dispatchthunks --handlerclass khResourceProviderProxy --handlercpp $TARGET ${SOURCES[1]}" ])

env.Command('khResourceManagerProxy.h',
            [ '../ProtocolGen.pl', 'ResourceManager.protocol' ],
            [ "${SOURCES[0]} --notry --proxyh $TARGET ${SOURCES[1]}" ])

env.Command('khResourceManagerProxy.cpp',
            [ '../ProtocolGen.pl', 'ResourceManager.protocol' ],
            [ "${SOURCES[0]} --notry --proxycpp $TARGET ${SOURCES[1]}" ])



# Resource Provider Protocol
env.Command('khResourceProviderDispatch.cpp',
            [ '../ProtocolGen.pl', 'ResourceProvider.protocol' ],
            [ "${SOURCES[0]} --dispatchthunks --handlerclass khResourceProvider --handlercpp $TARGET ${SOURCES[1]}" ])

env.Command('ResourceProviderProxy.h',
            [ '../ProtocolGen.pl', 'ResourceProvider.protocol' ],
            [ "${SOURCES[0]} --proxyh $TARGET ${SOURCES[1]}" ])

env.Command('ResourceProviderProxy.cpp',
            [ '../ProtocolGen.pl', 'ResourceProvider.protocol' ],
            [ "${SOURCES[0]} --proxycpp $TARGET ${SOURCES[1]}" ])


otherDirObjs = [
    'fusion/geindexgen/.idl/BlendStack',
    'fusion/geindexgen/.idl/VectorStack',
    'fusion/geindexgen/.idl/UnifiedConfig',
    'fusion/dbgen/.idl/DBConfig',
    'fusion/geqtgen/.idl/Config',
    'fusion/gemaptilegen/.idl/Config',
    ]

pluginFiles = map(lambda p: 'plugins/'+p+'AssetD.cpp', plugins)
sysmanFiles = ['AssetD.cpp', 'AssetVersionD.cpp',
  'AssetOperation.cpp', 'StateUpdater.cpp', 'DependentStateTree.cpp',
  'WaitingAssets.cpp', 'khSystemManager.cpp',
  'khAssetManager.cpp', 'khAssetManagerDispatch.cpp',
  'khResourceManager.cpp', 'khTask.cpp', 'TaskRequirements.cpp',
  'khResourceProviderProxy.cpp', 'khResourceProviderProxyDispatch.cpp',
  'ResourceProviderProxy.cpp', 'Reservation.cpp',
  'SysManExtra.cpp', 'SysManFromStorage.cpp', 'InsetInfo.cpp'] + \
  pluginFiles
extraObjs = [TaskStorageObj, JobStorageObj, NextTaskIdObj, TaskRuleObj,
  FusionUniqueIdObj] + \
  commonobj + \
  env.ObjFromOtherDir(otherDirObjs)
sysmanObjs = map(lambda f: str(f).replace(".cpp", ".o"), sysmanFiles)
sysmanLibs = ['gegdal', 'geraster', 'gesearchtabs', 'genet', 'gepublish', 'gefconfigutil',
  'geindex_r', 'geutil', 'gecommon', 'gexml', 'gemiscconfig', 'qt-mt', 'xerces-c', 'geos',
  'gomp']
testLibs = sysmanLibs + ['gtest']

gesystemmanager = env.executable('gesystemmanager',
    [ 'gesystemmanager_main.cpp', env['FUSIONVER'] ] + sysmanFiles + extraObjs,
    LIBS=sysmanLibs)

geresourceprovider = env.executable('geresourceprovider',
    ['geresourceprovider_main.cpp',
     'khResourceProvider.cpp',
     'khResourceManagerProxy.cpp', 'khResourceProviderDispatch.cpp',
     TaskStorageObj, JobStorageObj,
     env['FUSIONVER'],
     env['BUILDDATE'],
     ],
    LIBS=['geautoingest', 'geconfigutil', 'gefconfigutil', 'geutil', 'gecommon', 'gexml', 'gemiscconfig', 'xerces-c', 'qt-mt'])


env.install('fusion_bin', [ gesystemmanager, geresourceprovider ] )
env.install('fusion_root', [ 'gefusion' ], 'etc/init.d')


SConscript(
    'parse-raster-project-xml-no-content_unittest/SConscript',
    exports=['env', 'sysmanObjs', 'extraObjs', 'testLibs'])

SConscript(
    'memory-tests/SConscript',
    exports=['env', 'sysmanObjs', 'extraObjs', 'testLibs'])

env.test('LeafAssetVersion_unittest',
    sysmanObjs + extraObjs + [ 'LeafAssetVersion_unittest.cpp' ],
    LIBS=testLibs)

env.test('StateUpdater_unittest',
    sysmanObjs + extraObjs + [ 'StateUpdater_unittest.cpp' ],
    LIBS=testLibs)

env.test('StorageManagerAssetFactory_unittest',
    sysmanObjs + extraObjs + [ 'StorageManagerAssetFactory_unittest.cpp' ],
    LIBS=testLibs)

env.test('AssetOperation_unittest',
    sysmanObjs + extraObjs + ['AssetOperation_unittest.cpp'],
    LIBS=testLibs)
