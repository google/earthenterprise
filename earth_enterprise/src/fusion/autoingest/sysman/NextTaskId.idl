// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <cstdint>
#include <string>

class NextTaskId {
  std::uint32_t id;

#pragma LoadAndSave

#hquote
  static std::string Filename(void);
  static void Load(void);
  static std::uint32_t Get(void);
 private:
  static std::uint32_t nextTaskId;
  static const std::uint32_t saveStep;
  static const std::uint32_t rollSize;
#/hquote


#cppquote
#include <autoingest/.idl/storage/AssetDefs.h>
#include <autoingest/geAssetRoot.h>
#include <khFileUtils.h>

  std::uint32_t NextTaskId::nextTaskId = 0;
  const std::uint32_t NextTaskId::saveStep = 1000;
  const std::uint32_t NextTaskId::rollSize = 1000000;  // even multiple of saveStep

  std::string NextTaskId::Filename(void) {
    return khComposePath(geAssetRoot::Dirname(AssetDefs::AssetRoot(),
                                              geAssetRoot::StateDir),
                         "NextTaskId.xml");
  }

  std::uint32_t
  NextTaskId::Get(void)
  {
    std::uint32_t id = nextTaskId++;

    // wrap the taskid at one million
    // (just to keep the numbers small enough for people to deal with)
    nextTaskId %= rollSize;

    // save the nextTaskId every 1000
    if (nextTaskId % saveStep == 0) {
      std::string filename = Filename();
      NextTaskId storage;

      // the one we save is always 1000 beyond what we're
      // using, that way a reload won't reuse any of the ids
      // that we handed out since the last save.
      storage.id = nextTaskId + saveStep;
      if (!storage.Save(filename)) {
        notify(NFY_WARN, "Unable to save %s", filename.c_str());
        // I was able to save it at startup, maybe something will change
        // and I'll be able to save it again the next time.
      }
      (void)khChmod(filename, 0600);
    }

    // taskid 0 is special (meaning no task)
    if (nextTaskId == 0)
      ++nextTaskId;

    return id;
  }

  void
  NextTaskId::Load(void)
  {
    std::string filename = Filename();

    nextTaskId = 0;

    NextTaskId storage;
    if (storage.Load(filename)) {
      if (storage.id > rollSize) {
        storage.id = 0;
      }
      nextTaskId = storage.id;
    }

    // Save out the next fallback point
    storage.id = (nextTaskId / saveStep) * saveStep + saveStep;
    storage.id %= rollSize;
    if (!storage.Save(filename)) {
      notify(NFY_FATAL, "Unable to save %s", filename.c_str());
    }

    // taskid 0 is special (meaning no task)
    if (nextTaskId == 0)
      ++nextTaskId;
  }


#/cppquote

}
