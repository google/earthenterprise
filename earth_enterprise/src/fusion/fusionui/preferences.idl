// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


#include <string>
#include <qstring.h>
#include <vector>
#include <map>

class PrefsConfig {
  enum BackgroundType { Unknown, BuiltinIndex, ImageryIndex, ImageryProject, StreamServer };
  enum ShowAssetManagerIconType{ ShowEarthIcons, ShowMercatorMapIcons, ShowWjs84MapIcons};

  ShowAssetManagerIconType assetManagerIconChoice = PrefsConfig::ShowEarthIcons;
  bool isMercatorPreview = false;
  QString backgroundTexturePath = PrefsConfig::kDefaultImageryIndex;
  QString backgroundTexturePathMercator = PrefsConfig::kDefaultImageryIndexMercator;

  QString characterEncoding = QString("<none>");

  bool showFullAssetPath = false;

  bool dataViewShowFID = true;
  bool dataViewAutoRaise = true;

  bool warnOnBadGfxMode = true;

  std::vector< unsigned int>  selectOutlineColor = std::vector< unsigned int> (4, 255);
  std::vector< unsigned int>  selectFillColor = std::vector< unsigned int> (4, 0);
  unsigned int selectOutlineLineWidth = 1U;

  QString backgroundImageryProject = QString("");
  QString backgroundImageryProjectMercator = QString("");
  int backgroundImageryProjectVersion = -1;
  QString backgroundStreamServer = QString("");
  BackgroundType backgroundType = PrefsConfig::Unknown;
  BackgroundType backgroundTypeMercator = PrefsConfig::Unknown;

  QString defaultVectorPath = QString("");
  QString defaultImageryPath = QString("");
  QString defaultTerrainPath = QString("");
  // Keep a map of database names to published server nicknames, so that the
  // UI dialog can select the most recently used.
  std::map<std::string, std::string> publisher_db_map = PrefsConfig::kEmptyStringMap;

#pragma LoadAndSave
#pragma AfterLoad

#hquote
  static const QString kOldDefaultImageryIndex;
  static const QString kDefaultImageryIndex;
  static const QString kDefaultImageryIndexMercator;
  static const std::map<std::string, std::string> kEmptyStringMap;

  QString GetBackgroundPath() const;
  QString GetDefaultBackgroundPath() const;
  void AfterLoad(void);
#/hquote

#cppquote
#include <geInstallPaths.h>
#include <khFileUtils.h>

  // leave this here to preserve the old path
  const QString PrefsConfig::kOldDefaultImageryIndex =
      QString("/usr/share/keyhole/datasets/default_imagery.khdb/index");

  const QString PrefsConfig::kDefaultImageryIndex =
      QString(khComposePath(kGESharePath, "datasets/default.gedb"));

  const QString PrefsConfig::kDefaultImageryIndexMercator =
      QString(khComposePath(kGESharePath, "datasets/default_mercator.kip"));

  const std::map<std::string, std::string> PrefsConfig::kEmptyStringMap;

  QString PrefsConfig::GetBackgroundPath() const {
    if (isMercatorPreview) {
      switch (backgroundTypeMercator) {
        case ImageryIndex:
          return backgroundTexturePathMercator;
        case ImageryProject:
          return backgroundImageryProjectMercator;
        case BuiltinIndex:
        default:
          return kDefaultImageryIndexMercator;
      }
    } else {
      switch (backgroundType) {
        case ImageryIndex:
          return backgroundTexturePath;
        case ImageryProject:
          return backgroundImageryProject;
        case StreamServer:
          return backgroundStreamServer;
        case BuiltinIndex:
        default:
          return kDefaultImageryIndex;
      }
    }
  }

  QString PrefsConfig::GetDefaultBackgroundPath() const {
    return (isMercatorPreview ?
            kDefaultImageryIndexMercator : kDefaultImageryIndex);
  }

  void PrefsConfig::AfterLoad(void) {
    if (backgroundType == PrefsConfig::Unknown) {
      backgroundType = PrefsConfig::BuiltinIndex;
      if (backgroundTexturePath == kOldDefaultImageryIndex) {
        backgroundTexturePath = kDefaultImageryIndex;
      }
    }
    if (backgroundTypeMercator == PrefsConfig::Unknown) {
      backgroundType = PrefsConfig::BuiltinIndex;
    }
  }

#/cppquote
};
