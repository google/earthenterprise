// Copyright 2017 Google Inc.
// Copyright 2020 The Open GEE Contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include <cstdint>
#include <string>
#include <vector>
#include <khExtents.h>

class khMosaic
{
  class Tile
  {
    std::string      file;
    khOffset<double> origin;
    khSize<std::uint32_t>   rastersize;
  };
  class Band
  {
    std::string    datatype;
    std::string    colorinterp;
    khSize<std::uint32_t> blocksize;
    std::string    fillValue   = std::string(); // empty -> no fill
    std::string    noDataValue = std::string(); // empty -> no nodata value
  };

  std::string       srs;
  khOffset<double>  origin;
  khSize<double>    pixelsize;
  khSize<std::uint32_t>    rastersize;
  std::vector<Band> bands;
  std::vector<Tile> tiles;

#pragma LoadAndSave
};

class PrepData {
  class PrepDataBand {
    std::string    datatype;
    std::string    colorinterp;
    khSize<std::uint32_t> blocksize;
    std::string    nodata_value = std::string();  // empty -> no nodata value
  };
  class PrepDataTile {
    std::string       path;
    khSize<std::uint32_t>    raster_size;
    khExtents<double> extents;
    khSize<double>    pixel_size;
  };
  std::string               srs;
  std::vector<PrepDataBand> bands;
  std::vector<PrepDataTile> tiles;

#pragma LoadAndSave
};



class khVirtualRaster
{
  std::string       srs;
  khOffset<double>  origin;
  khSize<double>    pixelsize;
  khSize<std::uint32_t>    rastersize;

  class OutputBand
  {
    // info provided to outside world
    std::string     outDatatype;
    khSize<std::uint32_t>  outBlocksize;
    std::string     colorinterp;
    std::string     noDataValue = std::string(); // empty ->no nodata value
    // used internally
    std::string     inDatatype = std::string();  // empty -> == outDatatype
    std::string     defaultLut = std::string();  // empty -> no LUT

#pragma DontEmitDefaults

  };
  std::vector<OutputBand> outputBands;


  class InputTile
  {
    std::string      file;
    khOffset<double> origin;
    khSize<std::uint32_t>   rastersize;
    // empty bandLUTs -> use default from OutputBand
    std::vector<std::string> bandLUTs = std::vector<std::string>();

#pragma DontEmitDefaults
  };
  std::vector<InputTile> inputTiles;

  std::string fillTolerance = std::string();
  khExtents<std::uint32_t> cropExtents = khExtents<std::uint32_t>(); // empty() -> afterload will fill


#pragma LoadAndSave
#pragma AfterLoad

#hquote
  khVirtualRaster(const khMosaic &o);
  void AfterLoad(void) {
    if (cropExtents.empty()) {
      cropExtents = khExtents<std::uint32_t>(khOffset<std::uint32_t>(XYOrder, 0, 0),
                                      rastersize);
    }
  }
  double cropOriginX(void) const {
    return origin.x() + cropExtents.beginX() * pixelsize.width;
  }
  double cropOriginY(void) const {
    return origin.y() + cropExtents.beginY() * pixelsize.height;
  }
#/hquote

#cppquote
  khVirtualRaster::khVirtualRaster(const khMosaic &o) :
      srs(o.srs), origin(o.origin),
      pixelsize(o.pixelsize), rastersize(o.rastersize),
      fillTolerance()
  {
    for (std::vector<khMosaic::Band>::const_iterator b = o.bands.begin();
         b != o.bands.end(); ++b) {
      outputBands.push_back
        (OutputBand(b->datatype,
                    b->blocksize,
                    b->colorinterp,
                    b->fillValue.empty()? b->noDataValue : b->fillValue
                    ));
    }
    for (std::vector<khMosaic::Tile>::const_iterator t = o.tiles.begin();
         t != o.tiles.end(); ++t) {
      inputTiles.push_back(InputTile(t->file,
                                     t->origin,
                                     t->rastersize));
    }
    cropExtents = khExtents<std::uint32_t>(khOffset<std::uint32_t>(XYOrder, 0, 0),
                                    rastersize);
  }
#/cppquote
};
