#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys
import os

Import('env')
Import('architecture')

devel = '-devel'
none = ''
# List of RPM packages (and versions) to be built.
# [name, version, x86_64|i686|noarch, '-devel'|'']
specfiles = [
   ['openssl-ge', '0.9.8l-0', architecture, devel],
   ['openldap-ge', '2.3.39-0', architecture, devel],
   ['expat-ge', '2.0.1-0', architecture, devel],
   ['qt-ge', '3.3.6-8', architecture, devel],
   ['xerces-c-ge', '2.7.0-3', architecture, devel],
   ['libcurl-ge', '7.16.3-3', architecture, devel],
   ['proj-ge', '4.5.0-0', architecture, devel],
   ['libtiff-ge', '3.8.2-2', architecture, devel],
   ['libgeotiff-ge', '1.2.3-4', architecture, devel],
   ['ogdi-ge', '3.1.5-6', architecture, devel],
   ['geos-ge', '2.2.3-0', architecture, devel],
   ['gdal-ge', '1.4.2-2', architecture, devel],
   ['libjs-ge', '1.5.0.1-10', architecture, devel],
   ['libsgl-ge', '0.8-6', architecture, devel],
   ['postgresql-ge', '8.1.8-4', architecture, devel],
   ['postgis-ge', '1.1.7-1', architecture, none],
   ['apache-ge', '2.2.9-0', architecture, devel],
   ['tomcat-ge', '6.0.18-0', architecture, none],
]

# These spec files may be necessary in the future.
others = [
   ['binutils-ge', '2.16.91.0.7-4', architecture, none],
   ['gcc-ge', '4.1.1-4', architecture, '-runtime'],
   ['gdb-ge', '6.5-3', architecture, none],
   ['jdk-ge', '1.6.0-1', architecture, none],
   ['ant-ge', '1.7.0-1', 'noarch', none],
]

# Set up custom builders for {x86_64,i686,noarch}.rpm and src.rpm
rpmbuild_command = 'rpmbuild  --rcfile /usr/lib/rpm/rpmrc:../../.rpmrc '
    
# Run a command and exit on failure.
def runCommand(command):
   print '\n\nExecuting: ' + command + '\n'
   status = os.system(command);
   if status != 0:
     print 'Failure: ' + command
     print 'Exiting'
     sys.exit(1)

# Build the RPM, the SRPM and install the RPM
def buildRPM(spec, rpm, srcrpm, devel_rpm):
   if os.path.exists(rpm):
     ts_spec = os.stat(spec).st_mtime
     ts_rpm = os.stat(rpm).st_mtime
     if ts_spec < ts_rpm:
       print spec + ' is up to date\n'
       return
   runCommand(rpmbuild_command + '-bb ' + spec)
   runCommand(rpmbuild_command + '-bs ' + spec)
   runCommand('rpm -i ' + rpm)
   if devel_rpm != '':
     runCommand('rpm -i ' + devel_rpm)

# Build the RPMS in order (due to dependencies!)
for file_info in specfiles:
   file = file_info[0]
   version = file_info[1]
   arch = file_info[2]
   devel_package = file_info[3]

   rpm = '../RPMS/' + arch + '/' + file + '-' + version + '.' + arch + '.rpm'
   devel_rpm = ''
   if devel_package != '':
     devel_rpm = '../RPMS/' + arch + '/' + file + devel_package + '-' + version + '.' + arch + '.rpm'
   srcrpm = '../SRPMS/' + file + '-' + version + '.src.rpm'
   spec = file + '.spec'
   print 'Building ' + rpm + ', ' + devel_rpm + ', ' + srcrpm + '\n  from ' + spec
   buildRPM(spec, rpm, srcrpm, devel_rpm)

# Was not trivial to use scons commands to build this (would be faster, but dependencies
# of rpms are not easily specified except the linear order.
# rpm_builder = Builder(action = rpmbuild_command + '-bb $SOURCE')
# src_rpm_builder = Builder(action = rpmbuild_command + '-bs $SOURCE')
# env.Append(BUILDERS = {'Rpm' : rpm_builder})
# env.Append(BUILDERS = {'SrcRpm' : src_rpm_builder})

# env.Rpm(rpm, spec)
# env.SrcRpm(srcrpm, spec)
