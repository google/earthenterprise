#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys
import os
import re

from packageUtils import UsesRPM
from packageUtils import AssertPackageVersion

# make our umask less severe while building files
try:
        umask = os.umask(022)
except OSError:
        pass

# Check installed versions
EnsureSConsVersion(0, 96, 92)
AssertPackageVersion('gcc-ge', '4.1.1-0')
AssertPackageVersion('jdk-ge', '1.6.0-1')

# find out the machine architecture
fh = os.popen("uname -m")
architecture = fh.readline().strip()
fh.close()
print "Building RPMS and SRPMS for " + architecture

if not UsesRPM():
   print "Must build on an RPM enabled machine! Exiting"
   Exit(1);

# create the environment that controls the builds
env = Environment()
Export('env')
Export('architecture')

# Create ~/.rpmmacros if it doesn't exist
home = os.environ.get('HOME', 0)
if home: env['ENV']['HOME'] = str(home)
rpmmacros_file = home + '/.rpmmacros'

def createRpmMacros(env, target, source):
   print 'Creating rpmmacros file: ' + target + '\n'
   directory = os.getcwd()
   file = open(target, 'w')
   file.writelines(['%__check_files  ' + directory + '/rpm-check-files.sh %{buildroot}\n',
                    '%_topdir ' + directory + '/packages\n',
                    '%_tmppath /tmp\n', 
                    '%__os_install_post \\\n', 
                    '%{nil}\n'])
   file.close()
   return None

# Adding the command doesn't seem to force this file to be created.
# Create it always for now.
env.Command(rpmmacros_file, '.rpmmacros', createRpmMacros)
createRpmMacros(env, rpmmacros_file, None)

# Execute the SConscript for packages
SConscript('packages/SPECS/SConscript')
