#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file is 'earth_enterprise/SConstruct'

import sys
import os
import commands

sys.path = sys.path + ['src/scons']
from khEnvironment import khEnvironment

EnsureSConsVersion(0, 96, 92)

# Set 'package_command_arguments' based on a parameter
# that is to be passed on to Gradle
package_command_arguments = "-Pdebug"

for parameter in [ 'release', 'optimize', 'profile' ] :
  if int( ARGUMENTS.get( parameter, '0' ) ) :
    package_command_arguments = "-P" + parameter
    break;



# process commandline arguments
installdir = ARGUMENTS.get('installdir', '/tmp/fusion_os_install')
with open('rpms/build.properties', 'w') as f:
    print >> f, "## Auto-generated file from scons."
    print >> f, "## Manual changes will be overwritten."
    print >> f, str('staged=') + installdir.strip()

installdir = Dir(installdir)
def dir_cat(installdir, subdir1, subdir2):
   if (len(subdir2) > 0):
      return Dir(subdir1 + subdir2, installdir)
   else:
      return Dir(subdir1, installdir)

def inst_common_dir(subdir):
   return dir_cat(installdir, 'common/opt/google/', subdir)
def inst_manual_dir(subdir):
   return dir_cat(installdir, 'manual/opt/google/', subdir)
def inst_fusion_dir(subdir):
   return dir_cat(installdir, 'fusion/opt/google/', subdir)
def inst_server_dir(subdir):
   return dir_cat(installdir, 'server/opt/google/', subdir)
def inst_tools_dir(subdir):
   return dir_cat(installdir, 'tools/opt/google/', subdir)
def inst_disconnected_dir(subdir):
   return dir_cat(installdir, 'disconnected/opt/google/', subdir)
def inst_geplaces_dir(subdir):
   return dir_cat(installdir, 'geplaces/opt/google/', subdir)
def inst_searchexample_dir(subdir):
   return dir_cat(installdir, 'searchexample/opt/google/', subdir)

# We have 5 install directories:
#   Common: installed in both Fusion and Server
#   Fusion: the fusion client
#   Server: apache module and configuration and helper files
#   Tools:  internal only tools
#   Disconnected: disconnected publisher libs and binaries
installdirs = {
   'root':              installdir,

   'common_lib':        inst_common_dir('lib'),
   'common_share':      inst_common_dir('share'),

   'manual_share':      inst_manual_dir('share'),

   'fusion_bin':        inst_fusion_dir('bin'),
   'fusion_etc':        Dir('fusion/etc/opt/google', installdir),
   'fusion_lib':        inst_fusion_dir('lib'),
   'fusion_root':       Dir('fusion/', installdir),
   'fusion_share':      inst_fusion_dir('share'),

   'disconnected_bin':  inst_disconnected_dir('bin'),
   'disconnected_lib':  inst_disconnected_dir('lib'),
   'disconnected_share': inst_disconnected_dir('share'),

   'tools_bin':         inst_tools_dir('bin'),
   'tools_lib':         inst_tools_dir('lib'),

   'server_bin':        inst_server_dir('bin'),
   'server_etc':        Dir('server/etc/opt/google', installdir),
   'server_lib':        inst_server_dir('lib'),
   'server_root':       Dir('server/', installdir),
   'server_share':      inst_server_dir('share'),
   'server_sql':        inst_server_dir('share/opengee-server/sql'),

   'httpd':             inst_server_dir('gehttpd'),
   'httpdmodules':      inst_server_dir('gehttpd/modules'),
   'httpdcgi':          inst_server_dir('gehttpd/cgi-bin'),
   'httpdconf':         inst_server_dir('gehttpd/conf.d'),
   'httpdconfex':       inst_server_dir('gehttpd/conf.d/examples'),
   'httpdconfvs':       inst_server_dir('gehttpd/conf.d/virtual_servers'),
   'httpdconfvscmn':    inst_server_dir('gehttpd/conf.d/virtual_servers/common'),
   'httpdconfvsrt':     inst_server_dir('gehttpd/conf.d/virtual_servers/runtime'),
   'httpdicons':        inst_server_dir('gehttpd/htdocs/icons'),
   'maps':              inst_server_dir('gehttpd/htdocs/maps'),
   'httpddocs':         inst_server_dir('gehttpd/htdocs/shared_assets/docs'),

   'search_plugins':    inst_server_dir('search/plugins'),
   'search_tabs':       inst_server_dir('search/tabs'),
   'search_api':        inst_server_dir('search/api'),

   'searchexample':     inst_searchexample_dir('share/searchexample/'),
   'geplaces':          inst_geplaces_dir('share/geplaces/'),
   }

# Define exportdirs because khEnvironment expects it.
exportdirs = {
           'root': '.',
           'lib':  '.',
           'bin':  '.',
           }

# create the environment that controls the builds
env = khEnvironment(ENV={'PATH' : '/bin:/bin:/usr/bin'},
                    exportdirs=exportdirs,
                    installdirs=installdirs,
                    JAVA_HOME="/opt/google/java")

def getArgumentVarsAsString():
  vars=''
  for key, value in ARGUMENTS.iteritems():
    if key != 'installdir':
      vars += key + '=' + str(value) + ' '

  return vars[:-1]  # Remove the trailing space

arg_vars = getArgumentVarsAsString()
num_jobs = GetOption('num_jobs')

# Build Fusion and Server
build_cmds = {'build': [
    'cd src; scons -j%d %s third_party' % (num_jobs, arg_vars),
    'cd src; scons -j%d %s' % (num_jobs, arg_vars)
]}
run_build = env.PhonyTargets(**build_cmds)

# Copy the binaries to the install staging directory
stage_bin_cmds = {'stage_bin': [
    'cd src; scons -j%d installdir="%s" %s install' % (num_jobs, installdir, arg_vars)
]}
stage_bin = env.PhonyTargets(**stage_bin_cmds)

# Copy the data and docs to the install staging directory
stage_data = env.Alias('stage_data', installdirs['root'])
env.Depends(stage_data, stage_bin)

# Copy the tutorial to the install staging directory if it exists.
stage_tutorial_cmds = {'stage_tutorial': [
    'cd tutorial; if [ -d FusionTutorial ]; then scons -j%d installdir="%s"; else echo "Skipping tutorial; no tutorial files found."; fi' % (num_jobs, installdir)
]}
stage_tutorial = env.PhonyTargets(**stage_tutorial_cmds)
env.Depends(stage_tutorial, stage_data)

package_staged_cmds = {'package_install': [
    "cd rpms; ./gradlew osPackage " + package_command_arguments
]}

package_install = env.PhonyTargets(**package_staged_cmds)
env.Depends(package_install, stage_data)

package_lint_cmds = {'package_lint': [
    "rpmlint -f ./rpmlintrc rpms/build/distributions/*.rpm"
]}

package_clean_cmds = {'package_clean': [
    "rm -f rpms/build/distributions/*.rpm"
]}

package_clean = env.PhonyTargets(**package_clean_cmds)

package_lint = env.PhonyTargets(**package_lint_cmds)
env.Depends(package_lint, package_clean)
env.Depends(package_lint, package_install)

env.Alias('stage_install', 'stage_tutorial')
env.Alias('install', 'stage_install')
env.Alias('package', 'package_install')
env.Alias('lint', 'package_lint')
Export('env')
Export('installdir')

SConscript(dirs=['datasets', 'geplaces', 'searchexample', 'docs'],
           exports=['env', 'installdir'])

# The following target is added to phony_target(or alias_target) 'stage_install'
# so that it will be executed last while trying to create target stage_install
this_dict = {'stage_install': [
    '/bin/bash ./src/installer/scripts/verify_installerdir.sh "%s"' % installdir,
    'echo "Install files copied to %s."' % installdir
]}
env.PhonyTargets(**this_dict)

# Clean install dir (note: the current sconscripts leave stuff behind, like
# directories).

if 'cleanall' in COMMAND_LINE_TARGETS:
    #clean the search and getomcat install folders.
    file = installdir.get_path()
    commands.getstatusoutput("rm -rf " + file)

    #clean /tmp/fusion_os_install
    Clean(env, installdir)

    #clean build data in ./src
    clean_cmd = 'cd src; scons %s -c cleanall' % (arg_vars)
    env.Execute(clean_cmd)

    #clean scons metadata.. can't use Clean() or Delete()
    #because they are scons functions and recreate
    #the files/directories they delete
    for sconsfile in [
          ".sconsign.dblite",
          ".sconf_temp",
          "config.log",
          "src/.sconsign.dblite",
          "src/.sconf_temp",
          "src/config.log"]:
      os.system("rm -rf " + sconsfile)
